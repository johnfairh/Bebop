[
  {
    "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Empty.swift" : {
      "key.bb.module_name" : "SpmSwiftModule",
      "key.bb.pass_index" : 0,
      "key.bb.version" : "1.0",
      "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
      "key.length" : 0,
      "key.offset" : 0
    }
  },
  {
    "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift" : {
      "key.bb.module_name" : "SpmSwiftModule",
      "key.bb.pass_index" : 0,
      "key.bb.version" : "1.0",
      "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
      "key.length" : 1296,
      "key.offset" : 0,
      "key.substructure" : [
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>class GenericBase&lt;T&gt;<\/Declaration>",
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "class GenericBase<T>",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "class "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "GenericBase"
            }
          ],
          "key.bodylength" : 100,
          "key.bodyoffset" : 22,
          "key.column" : 7,
          "key.decl_lang" : "source.lang.swift",
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
          "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>GenericBase<\/decl.name>&lt;<decl.generic_type_param usr=\"s:14SpmSwiftModule11GenericBaseC1Txmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;<\/decl.class>",
          "key.kind" : "source.lang.swift.decl.class",
          "key.length" : 123,
          "key.line" : 1,
          "key.name" : "GenericBase",
          "key.namelength" : 11,
          "key.nameoffset" : 6,
          "key.offset" : 0,
          "key.parsed_declaration" : "class GenericBase<T>",
          "key.parsed_scope.end" : 10,
          "key.parsed_scope.start" : 1,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>T<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "T",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "T"
                }
              ],
              "key.column" : 19,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
              "key.kind" : "source.lang.swift.decl.generic_type_param",
              "key.length" : 1,
              "key.line" : 1,
              "key.name" : "T",
              "key.namelength" : 1,
              "key.nameoffset" : 18,
              "key.offset" : 18,
              "key.parsed_declaration" : "class GenericBase<T",
              "key.parsed_scope.end" : 1,
              "key.parsed_scope.start" : 1,
              "key.typename" : "T.Type",
              "key.typeusr" : "$sxmD",
              "key.usr" : "s:14SpmSwiftModule11GenericBaseC1Txmfp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>var boxed: <Type usr=\"s:14SpmSwiftModule11GenericBaseC1Txmfp\">T<\/Type><\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "var boxed: T",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "var "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "boxed"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": T"
                }
              ],
              "key.column" : 7,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>boxed<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:14SpmSwiftModule11GenericBaseC1Txmfp\">T<\/ref.generic_type_param><\/decl.var.type><\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 12,
              "key.line" : 2,
              "key.name" : "boxed",
              "key.namelength" : 5,
              "key.nameoffset" : 29,
              "key.offset" : 25,
              "key.parsed_declaration" : "var boxed: T",
              "key.parsed_scope.end" : 2,
              "key.parsed_scope.start" : 2,
              "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
              "key.typename" : "T",
              "key.typeusr" : "$sxD",
              "key.usr" : "s:14SpmSwiftModule11GenericBaseC5boxedxvp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>init(type: <Type usr=\"s:14SpmSwiftModule11GenericBaseC1Txmfp\">T<\/Type>)<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "init(type: T)",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "init"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "("
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "type"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": T)"
                }
              ],
              "key.bodylength" : 20,
              "key.bodyoffset" : 55,
              "key.column" : 3,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>type<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:14SpmSwiftModule11GenericBaseC1Txmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 36,
              "key.line" : 3,
              "key.name" : "init(type:)",
              "key.namelength" : 13,
              "key.nameoffset" : 40,
              "key.offset" : 40,
              "key.parsed_declaration" : "init(type: T)",
              "key.parsed_scope.end" : 5,
              "key.parsed_scope.start" : 3,
              "key.typename" : "<T> (GenericBase<T>.Type) -> (T) -> GenericBase<T>",
              "key.typeusr" : "$s4type14SpmSwiftModule11GenericBaseCyxGx_tcD",
              "key.usr" : "s:14SpmSwiftModule11GenericBaseC4typeACyxGx_tcfc"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>func mutify() -&gt; <Type usr=\"s:14SpmSwiftModule11GenericBaseC1Txmfp\">T<\/Type><\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func mutify() -> T",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "mutify"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "() -> T"
                }
              ],
              "key.bodylength" : 20,
              "key.bodyoffset" : 100,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>mutify<\/decl.name>() -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:14SpmSwiftModule11GenericBaseC1Txmfp\">T<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 41,
              "key.line" : 7,
              "key.name" : "mutify()",
              "key.namelength" : 8,
              "key.nameoffset" : 85,
              "key.offset" : 80,
              "key.parsed_declaration" : "func mutify() -> T",
              "key.parsed_scope.end" : 9,
              "key.parsed_scope.start" : 7,
              "key.typename" : "<T> (GenericBase<T>) -> () -> T",
              "key.typeusr" : "$sxycD",
              "key.usr" : "s:14SpmSwiftModule11GenericBaseC6mutifyxyF"
            }
          ],
          "key.typename" : "GenericBase<T>.Type",
          "key.typeusr" : "$s14SpmSwiftModule11GenericBaseCyxGmD",
          "key.usr" : "s:14SpmSwiftModule11GenericBaseC"
        },
        {
          "key.annotated_decl" : "<Declaration>class GenericBase&lt;T&gt;<\/Declaration>",
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension GenericBase where T: Codable",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "GenericBase"
            }
          ],
          "key.bodylength" : 70,
          "key.bodyoffset" : 165,
          "key.column" : 7,
          "key.decl_lang" : "source.lang.swift",
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
          "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>GenericBase<\/decl.name>&lt;<decl.generic_type_param usr=\"s:14SpmSwiftModule11GenericBaseC1Txmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;<\/decl.class>",
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 111,
          "key.line" : 1,
          "key.name" : "GenericBase",
          "key.namelength" : 11,
          "key.nameoffset" : 135,
          "key.offset" : 125,
          "key.parsed_declaration" : "extension GenericBase where T: Codable",
          "key.parsed_scope.end" : 17,
          "key.parsed_scope.start" : 12,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>var codableCount: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "var codableCount: Int { get }",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "var "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "codableCount"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": Int"
                }
              ],
              "key.bodylength" : 17,
              "key.bodyoffset" : 191,
              "key.column" : 7,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>codableCount<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 41,
              "key.line" : 13,
              "key.name" : "codableCount",
              "key.namelength" : 12,
              "key.nameoffset" : 172,
              "key.offset" : 168,
              "key.parsed_declaration" : "var codableCount: Int",
              "key.parsed_scope.end" : 15,
              "key.parsed_scope.start" : 13,
              "key.typename" : "Int",
              "key.typeusr" : "$sSiD",
              "key.usr" : "s:14SpmSwiftModule11GenericBaseCAASeRzSERzlE12codableCountSivp"
            },
            {
              "key.annotated_decl" : "<Declaration>func doCodability()<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func doCodability()",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "doCodability"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "()"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 233,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>doCodability<\/decl.name>()<\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 22,
              "key.line" : 16,
              "key.name" : "doCodability()",
              "key.namelength" : 14,
              "key.nameoffset" : 217,
              "key.offset" : 212,
              "key.parsed_declaration" : "func doCodability()",
              "key.parsed_scope.end" : 16,
              "key.parsed_scope.start" : 16,
              "key.typename" : "<T where T : Decodable, T : Encodable> (GenericBase<T>) -> () -> ()",
              "key.typeusr" : "$syycD",
              "key.usr" : "s:14SpmSwiftModule11GenericBaseCAASeRzSERzlE12doCodabilityyyF"
            }
          ],
          "key.typename" : "GenericBase<T>.Type",
          "key.typeusr" : "$s14SpmSwiftModule11GenericBaseCyxGmD",
          "key.usr" : "s:14SpmSwiftModule11GenericBaseC"
        },
        {
          "key.annotated_decl" : "<Declaration>class GenericBase&lt;T&gt;<\/Declaration>",
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension GenericBase\nwhere\n    T: Equatable,\n    T: FirstProtocol",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "GenericBase"
            }
          ],
          "key.bodylength" : 51,
          "key.bodyoffset" : 326,
          "key.column" : 7,
          "key.decl_lang" : "source.lang.swift",
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
          "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>GenericBase<\/decl.name>&lt;<decl.generic_type_param usr=\"s:14SpmSwiftModule11GenericBaseC1Txmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;<\/decl.class>",
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 140,
          "key.line" : 1,
          "key.name" : "GenericBase",
          "key.namelength" : 11,
          "key.nameoffset" : 248,
          "key.offset" : 238,
          "key.parsed_declaration" : "extension GenericBase where T: Equatable,\n                            T: FirstProtocol",
          "key.parsed_scope.end" : 24,
          "key.parsed_scope.start" : 19,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>func doFirstMagic()<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func doFirstMagic()",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "doFirstMagic"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "()"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 350,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>doFirstMagic<\/decl.name>()<\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 22,
              "key.line" : 21,
              "key.name" : "doFirstMagic()",
              "key.namelength" : 14,
              "key.nameoffset" : 334,
              "key.offset" : 329,
              "key.parsed_declaration" : "func doFirstMagic()",
              "key.parsed_scope.end" : 21,
              "key.parsed_scope.start" : 21,
              "key.typename" : "<T where T : FirstProtocol, T : Equatable> (GenericBase<T>) -> () -> ()",
              "key.typeusr" : "$syycD",
              "key.usr" : "s:14SpmSwiftModule11GenericBaseCA2A13FirstProtocolRzSQRzlE02doF5MagicyyF"
            },
            {
              "key.annotated_decl" : "<Declaration>func doMoreMagic()<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func doMoreMagic()",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "doMoreMagic"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "()"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 375,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>doMoreMagic<\/decl.name>()<\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 21,
              "key.line" : 23,
              "key.name" : "doMoreMagic()",
              "key.namelength" : 13,
              "key.nameoffset" : 360,
              "key.offset" : 355,
              "key.parsed_declaration" : "func doMoreMagic()",
              "key.parsed_scope.end" : 23,
              "key.parsed_scope.start" : 23,
              "key.typename" : "<T where T : FirstProtocol, T : Equatable> (GenericBase<T>) -> () -> ()",
              "key.typeusr" : "$syycD",
              "key.usr" : "s:14SpmSwiftModule11GenericBaseCA2A13FirstProtocolRzSQRzlE11doMoreMagicyyF"
            }
          ],
          "key.typename" : "GenericBase<T>.Type",
          "key.typeusr" : "$s14SpmSwiftModule11GenericBaseCyxGmD",
          "key.usr" : "s:14SpmSwiftModule11GenericBaseC"
        },
        {
          "key.annotated_decl" : "<Declaration>class GenericBase&lt;T&gt;<\/Declaration>",
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension GenericBase where T: Hashable",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "GenericBase"
            }
          ],
          "key.bodylength" : 52,
          "key.bodyoffset" : 421,
          "key.column" : 7,
          "key.decl_lang" : "source.lang.swift",
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
          "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>GenericBase<\/decl.name>&lt;<decl.generic_type_param usr=\"s:14SpmSwiftModule11GenericBaseC1Txmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;<\/decl.class>",
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 94,
          "key.line" : 1,
          "key.name" : "GenericBase",
          "key.namelength" : 11,
          "key.nameoffset" : 390,
          "key.offset" : 380,
          "key.parsed_declaration" : "extension GenericBase where T: Hashable",
          "key.parsed_scope.end" : 29,
          "key.parsed_scope.start" : 26,
          "key.substructure" : [
            {
              "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
              "key.length" : 22,
              "key.name" : "MARK: User-custom mark",
              "key.namelength" : 0,
              "key.nameoffset" : 0,
              "key.offset" : 427
            },
            {
              "key.annotated_decl" : "<Declaration>func doHashable()<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func doHashable()",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "doHashable"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "()"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 471,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>doHashable<\/decl.name>()<\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 20,
              "key.line" : 28,
              "key.name" : "doHashable()",
              "key.namelength" : 12,
              "key.nameoffset" : 457,
              "key.offset" : 452,
              "key.parsed_declaration" : "func doHashable()",
              "key.parsed_scope.end" : 28,
              "key.parsed_scope.start" : 28,
              "key.typename" : "<T where T : Hashable> (GenericBase<T>) -> () -> ()",
              "key.typeusr" : "$syycD",
              "key.usr" : "s:14SpmSwiftModule11GenericBaseCAASHRzlE10doHashableyyF"
            }
          ],
          "key.typename" : "GenericBase<T>.Type",
          "key.typeusr" : "$s14SpmSwiftModule11GenericBaseCyxGmD",
          "key.usr" : "s:14SpmSwiftModule11GenericBaseC"
        },
        {
          "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
          "key.length" : 29,
          "key.name" : "MARK: CustomStringConvertible",
          "key.namelength" : 0,
          "key.nameoffset" : 0,
          "key.offset" : 479
        },
        {
          "key.annotated_decl" : "<Declaration>class GenericBase&lt;T&gt;<\/Declaration>",
          "key.bb.inherited_types" : [
            {
              "key.bb.type_name" : "CustomStringConvertible"
            }
          ],
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension GenericBase: CustomStringConvertible",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "GenericBase"
            }
          ],
          "key.bodylength" : 47,
          "key.bodyoffset" : 558,
          "key.column" : 7,
          "key.decl_lang" : "source.lang.swift",
          "key.elements" : [
            {
              "key.kind" : "source.lang.swift.structure.elem.typeref",
              "key.length" : 23,
              "key.offset" : 533
            }
          ],
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
          "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>GenericBase<\/decl.name>&lt;<decl.generic_type_param usr=\"s:14SpmSwiftModule11GenericBaseC1Txmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;<\/decl.class>",
          "key.inheritedtypes" : [
            {
              "key.name" : "CustomStringConvertible"
            }
          ],
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 97,
          "key.line" : 1,
          "key.name" : "GenericBase",
          "key.namelength" : 11,
          "key.nameoffset" : 519,
          "key.offset" : 509,
          "key.parsed_declaration" : "extension GenericBase : CustomStringConvertible",
          "key.parsed_scope.end" : 36,
          "key.parsed_scope.start" : 32,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>var description: <Type usr=\"s:SS\">String<\/Type> { get }<\/Declaration>",
              "key.bb.documentation" : {
                "key.bb.abstract" : {
                  "en" : "A textual representation of this instance."
                },
                "key.bb.discussion" : {
                  "en" : "Calling this property directly is discouraged. Instead, convert an instance of any type to a string by using the `String(describing:)` initializer. This initializer works with any type, and uses the custom `description` property for types that conform to `CustomStringConvertible`:\n\n``` swift\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n\/\/ Prints \"(21, 30)\"\n\n```\n\nThe conversion of `p` to a string in the assignment to `s` uses the `Point` type’s `description` property."
                },
                "key.bb.doc_source" : "inherited"
              },
              "key.bb.is_override" : true,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "var description: String { get }",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "var "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "description"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": String"
                }
              ],
              "key.bodylength" : 17,
              "key.bodyoffset" : 586,
              "key.column" : 7,
              "key.decl_lang" : "source.lang.swift",
              "key.doc.declaration" : "var description: String { get }",
              "key.doc.discussion" : [
                {
                  "Para" : "Calling this property directly is discouraged. Instead, convert an instance of any type to a string by using the `String(describing:)` initializer. This initializer works with any type, and uses the custom `description` property for types that conform to `CustomStringConvertible`:"
                },
                {
                  "CodeListing" : ""
                },
                {
                  "Para" : "The conversion of `p` to a string in the assignment to `s` uses the `Point` type’s `description` property."
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>description<\/Name><USR>s:s23CustomStringConvertibleP11descriptionSSvp<\/USR><Declaration>var description: String { get }<\/Declaration><CommentParts><Abstract><Para>A textual representation of this instance.<\/Para><\/Abstract><Discussion><Para>Calling this property directly is discouraged. Instead, convert an instance of any type to a string by using the <codeVoice>String(describing:)<\/codeVoice> initializer. This initializer works with any type, and uses the custom <codeVoice>description<\/codeVoice> property for types that conform to <codeVoice>CustomStringConvertible<\/codeVoice>:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[struct Point: CustomStringConvertible {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    let x: Int, y: Int]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    var description: String {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        return \"(\\(x), \\(y))\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let p = Point(x: 21, y: 30)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let s = String(describing: p)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(s)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"(21, 30)\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The conversion of <codeVoice>p<\/codeVoice> to a string in the assignment to <codeVoice>s<\/codeVoice> uses the <codeVoice>Point<\/codeVoice> type’s <codeVoice>description<\/codeVoice> property.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>CustomStringConvertible<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "description",
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>description<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 43,
              "key.line" : 33,
              "key.name" : "description",
              "key.namelength" : 11,
              "key.nameoffset" : 565,
              "key.offset" : 561,
              "key.overrides" : [
                {
                  "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSvp"
                }
              ],
              "key.parsed_declaration" : "var description: String",
              "key.parsed_scope.end" : 35,
              "key.parsed_scope.start" : 33,
              "key.typename" : "String",
              "key.typeusr" : "$sSSD",
              "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSvp"
            }
          ],
          "key.typename" : "GenericBase<T>.Type",
          "key.typeusr" : "$s14SpmSwiftModule11GenericBaseCyxGmD",
          "key.usr" : "s:14SpmSwiftModule11GenericBaseC"
        },
        {
          "key.annotated_decl" : "<Declaration>protocol Collection : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript."
            },
            "key.bb.doc_source" : "inherited"
          },
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension Collection where Element: FirstProtocol",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "Collection"
            }
          ],
          "key.bb.type_module_name" : "Swift",
          "key.bodylength" : 26,
          "key.bodyoffset" : 659,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.declaration" : "protocol Collection : Sequence",
          "key.doc.discussion" : [
            {
              "Para" : "Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the `Collection` protocol declares and implements. In addition to the operations that collections inherit from the `Sequence` protocol, you gain access to methods that depend on accessing an element at a specific position in a collection."
            },
            {
              "Para" : "For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "The `firstSpace` constant is an index into the `text` string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, `firstSpace` is used to extract the prefix that contains elements up to that index."
            },
            {
              "Para" : "You can access an element of a collection through its subscript by using any valid index except the collection’s `endIndex` property. This property is a “past the end” index that does not correspond with any element of the collection."
            },
            {
              "Para" : "Here’s an example of accessing the first character in a string through its subscript:"
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "The `Collection` protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of `text` using the `first` property, which has the value of the first element of the collection, or `nil` if the collection is empty."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s `startIndex` property and finding every successor up to, and including, the `endIndex` property. All other values of the `Index` type, such as the `startIndex` property of a different collection, are invalid indices for this collection."
            },
            {
              "Para" : "Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the `MutableCollection` and `RangeReplaceableCollection` protocols, as well as for the specific type you’re using."
            },
            {
              "Para" : "You can access a slice of a collection through its ranged subscript or by calling methods like `prefix(while:)` or `suffix(_:)`. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics."
            },
            {
              "Para" : "The following example creates a `firstWord` constant by using the `prefix(while:)` method to get a slice of the `text` string."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "You can retrieve the same slice using the string’s ranged subscript, which takes a range expression."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "The retrieved slice of `text` is equivalent in each of these cases."
            },
            {
              "Para" : "A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created."
            },
            {
              "Para" : "For example, suppose you have an array holding the number of absences from each class during a session."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:"
            },
            {
              "List-Number" : ""
            },
            {
              "Para" : "Here’s an implementation of those steps:"
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice."
            },
            {
              "Para" : "For example, if you update the last element of the `absences` array from `0` to `2`, the `secondHalf` slice is unchanged."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "Although a sequence can be consumed as it is traversed, a collection is guaranteed to be : Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the `contains(_:)` method to test whether a collection includes an element."
            },
            {
              "Para" : "Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the `characters` view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the `Collection` protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add `Collection` conformance to your type, you must declare at least the following requirements:"
            },
            {
              "List-Bullet" : ""
            },
            {
              "Para" : "Types that conform to `Collection` are expected to provide the `startIndex` and `endIndex` properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees."
            },
            {
              "Para" : "The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its `count` property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its `count` property is an O() operation."
            }
          ],
          "key.doc.full_as_xml" : "<Class><Name>Collection<\/Name><USR>s:Sl<\/USR><Declaration>protocol Collection : Sequence<\/Declaration><CommentParts><Abstract><Para>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.<\/Para><\/Abstract><Discussion><Para>Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the <codeVoice>Collection<\/codeVoice> protocol declares and implements. In addition to the operations that collections inherit from the <codeVoice>Sequence<\/codeVoice> protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.<\/Para><Para>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let text = \"Buffalo buffalo buffalo buffalo.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstSpace<\/codeVoice> constant is an index into the <codeVoice>text<\/codeVoice> string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, <codeVoice>firstSpace<\/codeVoice> is used to extract the prefix that contains elements up to that index.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Individual Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access an element of a collection through its subscript by using any valid index except the collection’s <codeVoice>endIndex<\/codeVoice> property. This property is a “past the end” index that does not correspond with any element of the collection.<\/Para><Para>Here’s an example of accessing the first character in a string through its subscript:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstChar = text[text.startIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstChar)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"B\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Collection<\/codeVoice> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of <codeVoice>text<\/codeVoice> using the <codeVoice>first<\/codeVoice> property, which has the value of the first element of the collection, or <codeVoice>nil<\/codeVoice> if the collection is empty.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(text.first)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"B\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s <codeVoice>startIndex<\/codeVoice> property and finding every successor up to, and including, the <codeVoice>endIndex<\/codeVoice> property. All other values of the <codeVoice>Index<\/codeVoice> type, such as the <codeVoice>startIndex<\/codeVoice> property of a different collection, are invalid indices for this collection.<\/Para><Para>Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the <codeVoice>MutableCollection<\/codeVoice> and <codeVoice>RangeReplaceableCollection<\/codeVoice> protocols, as well as for the specific type you’re using.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Slices of a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access a slice of a collection through its ranged subscript or by calling methods like <codeVoice>prefix(while:)<\/codeVoice> or <codeVoice>suffix(_:)<\/codeVoice>. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.<\/Para><Para>The following example creates a <codeVoice>firstWord<\/codeVoice> constant by using the <codeVoice>prefix(while:)<\/codeVoice> method to get a slice of the <codeVoice>text<\/codeVoice> string.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstWord = text.prefix(while: { $0 != \" \" })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstWord)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The retrieved slice of <codeVoice>text<\/codeVoice> is equivalent in each of these cases.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Share Indices<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.<\/Para><Para>For example, suppose you have an array holding the number of absences from each class during a session.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var absences = [0, 2, 0, 4, 0, 3, 1, 0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:<\/Para><List-Number><Item><Para>Create a slice of the <codeVoice>absences<\/codeVoice> array that holds the second half of the days.<\/Para><\/Item><Item><Para>Use the <codeVoice>max(by:)<\/codeVoice> method to determine the index of the day with the most absences.<\/Para><\/Item><Item><Para>Print the result using the index found in step 2 on the original <codeVoice>absences<\/codeVoice> array.<\/Para><\/Item><\/List-Number><Para>Here’s an implementation of those steps:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let secondHalf = absences.suffix(absences.count \/ 2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = secondHalf.indices.max(by: { secondHalf[$0] < secondHalf[$1] }) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Highest second-half absences: \\(absences[i])\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Highest second-half absences: 3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Inherit Collection Semantics<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.<\/Para><Para>For example, if you update the last element of the <codeVoice>absences<\/codeVoice> array from <codeVoice>0<\/codeVoice> to <codeVoice>2<\/codeVoice>, the <codeVoice>secondHalf<\/codeVoice> slice is unchanged.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[absences[7] = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(absences)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 2, 0, 4, 0, 3, 1, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondHalf)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 3, 1, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Traversing a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be <emphasis>multipass<\/emphasis>: Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the <codeVoice>contains(_:)<\/codeVoice> method to test whether a collection includes an element.<\/Para><Para>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the <codeVoice>characters<\/codeVoice> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let word = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for character in word {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(character)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in word.indices {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(word[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Collection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <codeVoice>Collection<\/codeVoice> protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add <codeVoice>Collection<\/codeVoice> conformance to your type, you must declare at least the following requirements:<\/Para><List-Bullet><Item><Para>The <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties<\/Para><\/Item><Item><Para>A subscript that provides at least read-only access to your type’s elements<\/Para><\/Item><Item><Para>The <codeVoice>index(after:)<\/codeVoice> method for advancing an index into your collection<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Types that conform to <codeVoice>Collection<\/codeVoice> are expected to provide the <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.<\/Para><Para>The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its <codeVoice>count<\/codeVoice> property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <codeVoice>count<\/codeVoice> property is an O(<emphasis>n<\/emphasis>) operation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
          "key.doc.name" : "Collection",
          "key.doc.type" : "Class",
          "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Collection<\/decl.name> : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.protocol>",
          "key.groupname" : "Collection",
          "key.is_system" : true,
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 78,
          "key.modulename" : "Swift",
          "key.name" : "Collection",
          "key.namelength" : 10,
          "key.nameoffset" : 618,
          "key.offset" : 608,
          "key.parsed_declaration" : "extension Collection where Element: FirstProtocol",
          "key.parsed_scope.end" : 40,
          "key.parsed_scope.start" : 38,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>func collectEmAll()<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func collectEmAll()",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "collectEmAll"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "()"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 683,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>collectEmAll<\/decl.name>()<\/decl.function.method.instance>",
              "key.groupname" : "Collection",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 22,
              "key.line" : 39,
              "key.name" : "collectEmAll()",
              "key.namelength" : 14,
              "key.nameoffset" : 667,
              "key.offset" : 662,
              "key.parsed_declaration" : "func collectEmAll()",
              "key.parsed_scope.end" : 39,
              "key.parsed_scope.start" : 39,
              "key.typename" : "<Self where Self : Collection, Self.Element : FirstProtocol> (Self) -> () -> ()",
              "key.typeusr" : "$syycD",
              "key.usr" : "s:Sl14SpmSwiftModuleAA13FirstProtocol7ElementRpzrlE12collectEmAllyyF"
            }
          ],
          "key.typename" : "Collection.Protocol",
          "key.typeusr" : "$sSl_pmD",
          "key.usr" : "s:Sl"
        },
        {
          "key.annotated_decl" : "<Declaration>protocol Collection : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript."
            },
            "key.bb.doc_source" : "inherited"
          },
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension Collection where Element == SpmSwiftModule.Nested1",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "Collection"
            }
          ],
          "key.bb.type_module_name" : "Swift",
          "key.bodylength" : 23,
          "key.bodyoffset" : 750,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.declaration" : "protocol Collection : Sequence",
          "key.doc.discussion" : [
            {
              "Para" : "Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the `Collection` protocol declares and implements. In addition to the operations that collections inherit from the `Sequence` protocol, you gain access to methods that depend on accessing an element at a specific position in a collection."
            },
            {
              "Para" : "For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "The `firstSpace` constant is an index into the `text` string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, `firstSpace` is used to extract the prefix that contains elements up to that index."
            },
            {
              "Para" : "You can access an element of a collection through its subscript by using any valid index except the collection’s `endIndex` property. This property is a “past the end” index that does not correspond with any element of the collection."
            },
            {
              "Para" : "Here’s an example of accessing the first character in a string through its subscript:"
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "The `Collection` protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of `text` using the `first` property, which has the value of the first element of the collection, or `nil` if the collection is empty."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s `startIndex` property and finding every successor up to, and including, the `endIndex` property. All other values of the `Index` type, such as the `startIndex` property of a different collection, are invalid indices for this collection."
            },
            {
              "Para" : "Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the `MutableCollection` and `RangeReplaceableCollection` protocols, as well as for the specific type you’re using."
            },
            {
              "Para" : "You can access a slice of a collection through its ranged subscript or by calling methods like `prefix(while:)` or `suffix(_:)`. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics."
            },
            {
              "Para" : "The following example creates a `firstWord` constant by using the `prefix(while:)` method to get a slice of the `text` string."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "You can retrieve the same slice using the string’s ranged subscript, which takes a range expression."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "The retrieved slice of `text` is equivalent in each of these cases."
            },
            {
              "Para" : "A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created."
            },
            {
              "Para" : "For example, suppose you have an array holding the number of absences from each class during a session."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:"
            },
            {
              "List-Number" : ""
            },
            {
              "Para" : "Here’s an implementation of those steps:"
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice."
            },
            {
              "Para" : "For example, if you update the last element of the `absences` array from `0` to `2`, the `secondHalf` slice is unchanged."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "Although a sequence can be consumed as it is traversed, a collection is guaranteed to be : Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the `contains(_:)` method to test whether a collection includes an element."
            },
            {
              "Para" : "Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the `characters` view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the `Collection` protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add `Collection` conformance to your type, you must declare at least the following requirements:"
            },
            {
              "List-Bullet" : ""
            },
            {
              "Para" : "Types that conform to `Collection` are expected to provide the `startIndex` and `endIndex` properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees."
            },
            {
              "Para" : "The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its `count` property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its `count` property is an O() operation."
            }
          ],
          "key.doc.full_as_xml" : "<Class><Name>Collection<\/Name><USR>s:Sl<\/USR><Declaration>protocol Collection : Sequence<\/Declaration><CommentParts><Abstract><Para>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.<\/Para><\/Abstract><Discussion><Para>Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the <codeVoice>Collection<\/codeVoice> protocol declares and implements. In addition to the operations that collections inherit from the <codeVoice>Sequence<\/codeVoice> protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.<\/Para><Para>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let text = \"Buffalo buffalo buffalo buffalo.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstSpace<\/codeVoice> constant is an index into the <codeVoice>text<\/codeVoice> string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, <codeVoice>firstSpace<\/codeVoice> is used to extract the prefix that contains elements up to that index.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Individual Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access an element of a collection through its subscript by using any valid index except the collection’s <codeVoice>endIndex<\/codeVoice> property. This property is a “past the end” index that does not correspond with any element of the collection.<\/Para><Para>Here’s an example of accessing the first character in a string through its subscript:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstChar = text[text.startIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstChar)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"B\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Collection<\/codeVoice> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of <codeVoice>text<\/codeVoice> using the <codeVoice>first<\/codeVoice> property, which has the value of the first element of the collection, or <codeVoice>nil<\/codeVoice> if the collection is empty.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(text.first)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"B\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s <codeVoice>startIndex<\/codeVoice> property and finding every successor up to, and including, the <codeVoice>endIndex<\/codeVoice> property. All other values of the <codeVoice>Index<\/codeVoice> type, such as the <codeVoice>startIndex<\/codeVoice> property of a different collection, are invalid indices for this collection.<\/Para><Para>Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the <codeVoice>MutableCollection<\/codeVoice> and <codeVoice>RangeReplaceableCollection<\/codeVoice> protocols, as well as for the specific type you’re using.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Slices of a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access a slice of a collection through its ranged subscript or by calling methods like <codeVoice>prefix(while:)<\/codeVoice> or <codeVoice>suffix(_:)<\/codeVoice>. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.<\/Para><Para>The following example creates a <codeVoice>firstWord<\/codeVoice> constant by using the <codeVoice>prefix(while:)<\/codeVoice> method to get a slice of the <codeVoice>text<\/codeVoice> string.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstWord = text.prefix(while: { $0 != \" \" })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstWord)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The retrieved slice of <codeVoice>text<\/codeVoice> is equivalent in each of these cases.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Share Indices<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.<\/Para><Para>For example, suppose you have an array holding the number of absences from each class during a session.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var absences = [0, 2, 0, 4, 0, 3, 1, 0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:<\/Para><List-Number><Item><Para>Create a slice of the <codeVoice>absences<\/codeVoice> array that holds the second half of the days.<\/Para><\/Item><Item><Para>Use the <codeVoice>max(by:)<\/codeVoice> method to determine the index of the day with the most absences.<\/Para><\/Item><Item><Para>Print the result using the index found in step 2 on the original <codeVoice>absences<\/codeVoice> array.<\/Para><\/Item><\/List-Number><Para>Here’s an implementation of those steps:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let secondHalf = absences.suffix(absences.count \/ 2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = secondHalf.indices.max(by: { secondHalf[$0] < secondHalf[$1] }) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Highest second-half absences: \\(absences[i])\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Highest second-half absences: 3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Inherit Collection Semantics<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.<\/Para><Para>For example, if you update the last element of the <codeVoice>absences<\/codeVoice> array from <codeVoice>0<\/codeVoice> to <codeVoice>2<\/codeVoice>, the <codeVoice>secondHalf<\/codeVoice> slice is unchanged.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[absences[7] = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(absences)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 2, 0, 4, 0, 3, 1, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondHalf)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 3, 1, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Traversing a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be <emphasis>multipass<\/emphasis>: Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the <codeVoice>contains(_:)<\/codeVoice> method to test whether a collection includes an element.<\/Para><Para>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the <codeVoice>characters<\/codeVoice> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let word = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for character in word {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(character)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in word.indices {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(word[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Collection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <codeVoice>Collection<\/codeVoice> protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add <codeVoice>Collection<\/codeVoice> conformance to your type, you must declare at least the following requirements:<\/Para><List-Bullet><Item><Para>The <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties<\/Para><\/Item><Item><Para>A subscript that provides at least read-only access to your type’s elements<\/Para><\/Item><Item><Para>The <codeVoice>index(after:)<\/codeVoice> method for advancing an index into your collection<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Types that conform to <codeVoice>Collection<\/codeVoice> are expected to provide the <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.<\/Para><Para>The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its <codeVoice>count<\/codeVoice> property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <codeVoice>count<\/codeVoice> property is an O(<emphasis>n<\/emphasis>) operation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
          "key.doc.name" : "Collection",
          "key.doc.type" : "Class",
          "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Collection<\/decl.name> : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.protocol>",
          "key.groupname" : "Collection",
          "key.is_system" : true,
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 86,
          "key.modulename" : "Swift",
          "key.name" : "Collection",
          "key.namelength" : 10,
          "key.nameoffset" : 698,
          "key.offset" : 688,
          "key.parsed_declaration" : "extension Collection where Element == SpmSwiftModule.Nested1",
          "key.parsed_scope.end" : 44,
          "key.parsed_scope.start" : 42,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>func nestEmAll()<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func nestEmAll()",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "nestEmAll"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "()"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 771,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>nestEmAll<\/decl.name>()<\/decl.function.method.instance>",
              "key.groupname" : "Collection",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 19,
              "key.line" : 43,
              "key.name" : "nestEmAll()",
              "key.namelength" : 11,
              "key.nameoffset" : 758,
              "key.offset" : 753,
              "key.parsed_declaration" : "func nestEmAll()",
              "key.parsed_scope.end" : 43,
              "key.parsed_scope.start" : 43,
              "key.typename" : "<Self where Self : Collection, Self.Element == SpmSwiftModule.Nested1> (Self) -> () -> ()",
              "key.typeusr" : "$syycD",
              "key.usr" : "s:Sl14SpmSwiftModuleA2AV7Nested1V7ElementRtzrlE9nestEmAllyyF"
            }
          ],
          "key.typename" : "Collection.Protocol",
          "key.typeusr" : "$sSl_pmD",
          "key.usr" : "s:Sl"
        },
        {
          "key.annotated_decl" : "<Declaration>public protocol FirstProtocol<\/Declaration>",
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "A protocol."
            },
            "key.bb.doc_source" : "inherited"
          },
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension FirstProtocol where AssocType: Hashable",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "FirstProtocol"
            }
          ],
          "key.bodylength" : 142,
          "key.bodyoffset" : 827,
          "key.column" : 17,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.column" : 17,
          "key.doc.declaration" : "public protocol FirstProtocol",
          "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.doc.full_as_xml" : "<Class file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift\" line=\"2\" column=\"17\"><Name>FirstProtocol<\/Name><USR>s:14SpmSwiftModule13FirstProtocolP<\/USR><Declaration>public protocol FirstProtocol<\/Declaration><CommentParts><Abstract><Para>A protocol.<\/Para><\/Abstract><\/CommentParts><\/Class>",
          "key.doc.line" : 2,
          "key.doc.name" : "FirstProtocol",
          "key.doc.type" : "Class",
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>FirstProtocol<\/decl.name><\/decl.protocol>",
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 194,
          "key.line" : 2,
          "key.name" : "FirstProtocol",
          "key.namelength" : 13,
          "key.nameoffset" : 786,
          "key.offset" : 776,
          "key.parsed_declaration" : "extension FirstProtocol where AssocType: Hashable",
          "key.parsed_scope.end" : 53,
          "key.parsed_scope.start" : 46,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>func extHashableMethod()<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func extHashableMethod()",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "extHashableMethod"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "()"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 856,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>extHashableMethod<\/decl.name>()<\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 27,
              "key.line" : 47,
              "key.name" : "extHashableMethod()",
              "key.namelength" : 19,
              "key.nameoffset" : 835,
              "key.offset" : 830,
              "key.parsed_declaration" : "func extHashableMethod()",
              "key.parsed_scope.end" : 47,
              "key.parsed_scope.start" : 47,
              "key.typename" : "<Self where Self : FirstProtocol, Self.AssocType : Hashable> (Self) -> () -> ()",
              "key.typeusr" : "$syycD",
              "key.usr" : "s:14SpmSwiftModule13FirstProtocolPAASH9AssocTypeRpzrlE17extHashableMethodyyF"
            },
            {
              "key.annotated_decl" : "<Declaration>func m(arg: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
              "key.bb.documentation" : {
                "key.bb.abstract" : {
                  "en" : "Special default implementation for m in Hashable case."
                },
                "key.bb.doc_source" : "docComment"
              },
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func m(arg: Int) -> String",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "m"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "("
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "arg"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": Int) -> String"
                }
              ],
              "key.bodylength" : 17,
              "key.bodyoffset" : 950,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.doc.column" : 8,
              "key.doc.comment" : "Special default implementation for m in Hashable case.",
              "key.doc.declaration" : "func m(arg: Int) -> String",
              "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.doc.full_as_xml" : "<Function file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift\" line=\"50\" column=\"8\"><Name>m(arg:)<\/Name><USR>s:14SpmSwiftModule13FirstProtocolPAASH9AssocTypeRpzrlE1m3argSSSi_tF<\/USR><Declaration>func m(arg: Int) -&gt; String<\/Declaration><CommentParts><Abstract><Para>Special default implementation for m in Hashable case.<\/Para><\/Abstract><\/CommentParts><\/Function>",
              "key.doc.line" : 50,
              "key.doc.name" : "m(arg:)",
              "key.doc.type" : "Function",
              "key.doclength" : 59,
              "key.docoffset" : 861,
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>m<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>arg<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 46,
              "key.line" : 50,
              "key.name" : "m(arg:)",
              "key.namelength" : 11,
              "key.nameoffset" : 927,
              "key.offset" : 922,
              "key.parsed_declaration" : "func m(arg: Int) -> String",
              "key.parsed_scope.end" : 52,
              "key.parsed_scope.start" : 50,
              "key.related_decls" : [
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule13FirstProtocolP1m3argSSSi_tF\">m(arg: Int) -&gt; String<\/RelatedName>"
                },
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule13FirstProtocolPAAE1m3argSSSi_tF\">m(arg: Int) -&gt; String<\/RelatedName>"
                }
              ],
              "key.typename" : "<Self where Self : FirstProtocol, Self.AssocType : Hashable> (Self) -> (Int) -> String",
              "key.typeusr" : "$s3argSSSi_tcD",
              "key.usr" : "s:14SpmSwiftModule13FirstProtocolPAASH9AssocTypeRpzrlE1m3argSSSi_tF"
            }
          ],
          "key.typename" : "FirstProtocol.Protocol",
          "key.typeusr" : "$s14SpmSwiftModule13FirstProtocol_pmD",
          "key.usr" : "s:14SpmSwiftModule13FirstProtocolP"
        },
        {
          "key.annotated_decl" : "<Declaration>typealias Element = <Type usr=\"s:SJ\">Character<\/Type><\/Declaration>",
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "Extension of a nested type from an external module"
            },
            "key.bb.doc_source" : "docComment"
          },
          "key.bb.is_override" : true,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension String.Element",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "String.Element"
            }
          ],
          "key.bb.type_module_name" : "Swift",
          "key.bodylength" : 91,
          "key.bodyoffset" : 1053,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.comment" : "Extension of a nested type from an external module",
          "key.doc.declaration" : "associatedtype Element where Self.Element == Self.Iterator.Element",
          "key.doc.discussion" : [
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Other><Name>Element<\/Name><USR>s:ST7ElementQa<\/USR><Declaration>associatedtype Element where Self.Element == Self.Iterator.Element<\/Declaration><CommentParts><Abstract><Para>A type representing the sequence’s elements.<\/Para><\/Abstract><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>Sequence<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
          "key.doc.name" : "Element",
          "key.doc.type" : "Other",
          "key.doclength" : 55,
          "key.docoffset" : 972,
          "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>Element<\/decl.name> = <ref.struct usr=\"s:SJ\">Character<\/ref.struct><\/decl.typealias>",
          "key.groupname" : "String",
          "key.is_system" : true,
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 118,
          "key.modulename" : "Swift",
          "key.name" : "String.Element",
          "key.namelength" : 14,
          "key.nameoffset" : 1037,
          "key.offset" : 1027,
          "key.overrides" : [
            {
              "key.usr" : "s:SK7ElementQa"
            },
            {
              "key.usr" : "s:Sl7ElementQa"
            },
            {
              "key.usr" : "s:ST7ElementQa"
            }
          ],
          "key.parsed_declaration" : "extension String.Element",
          "key.parsed_scope.end" : 61,
          "key.parsed_scope.start" : 56,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>func method1()<\/Declaration>",
              "key.bb.documentation" : {
                "key.bb.abstract" : {
                  "en" : "documented method"
                },
                "key.bb.doc_source" : "docComment"
              },
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func method1()",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "method1"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "()"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 1097,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.doc.column" : 8,
              "key.doc.comment" : "documented method",
              "key.doc.declaration" : "func method1()",
              "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.doc.full_as_xml" : "<Function file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift\" line=\"58\" column=\"8\"><Name>method1()<\/Name><USR>s:SJ14SpmSwiftModuleE7method1yyF<\/USR><Declaration>func method1()<\/Declaration><CommentParts><Abstract><Para>documented method<\/Para><\/Abstract><\/CommentParts><\/Function>",
              "key.doc.line" : 58,
              "key.doc.name" : "method1()",
              "key.doc.type" : "Function",
              "key.doclength" : 22,
              "key.docoffset" : 1057,
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>method1<\/decl.name>()<\/decl.function.method.instance>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 17,
              "key.line" : 58,
              "key.name" : "method1()",
              "key.namelength" : 9,
              "key.nameoffset" : 1086,
              "key.offset" : 1081,
              "key.parsed_declaration" : "func method1()",
              "key.parsed_scope.end" : 58,
              "key.parsed_scope.start" : 58,
              "key.typename" : "(Character) -> () -> ()",
              "key.typeusr" : "$syycD",
              "key.usr" : "s:SJ14SpmSwiftModuleE7method1yyF"
            },
            {
              "key.annotated_decl" : "<Declaration>func method2()<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func method2()",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "method2"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "()"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 1142,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>method2<\/decl.name>()<\/decl.function.method.instance>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 17,
              "key.line" : 60,
              "key.name" : "method2()",
              "key.namelength" : 9,
              "key.nameoffset" : 1131,
              "key.offset" : 1126,
              "key.parsed_declaration" : "func method2()",
              "key.parsed_scope.end" : 60,
              "key.parsed_scope.start" : 60,
              "key.typename" : "(Character) -> () -> ()",
              "key.typeusr" : "$syycD",
              "key.usr" : "s:SJ14SpmSwiftModuleE7method2yyF"
            }
          ],
          "key.typename" : "Character.Type",
          "key.typeusr" : "$sSJmD",
          "key.usr" : "s:ST7ElementQa"
        },
        {
          "key.annotated_decl" : "<Declaration>protocol StringProtocol : <Type usr=\"s:SK\">BidirectionalCollection<\/Type>, <Type usr=\"s:SL\">Comparable<\/Type>, <Type usr=\"s:s32ExpressibleByStringInterpolationP\">ExpressibleByStringInterpolation<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s25LosslessStringConvertibleP\">LosslessStringConvertible<\/Type>, <Type usr=\"s:s16TextOutputStreamP\">TextOutputStream<\/Type>, <Type usr=\"s:s20TextOutputStreamableP\">TextOutputStreamable<\/Type> where <Type usr=\"s:Sy4Selfxmfp\">Self<\/Type>.<Type usr=\"s:ST7ElementQa\">Element<\/Type> == <Type usr=\"s:SJ\">Character<\/Type>, <Type usr=\"s:Sy4Selfxmfp\">Self<\/Type>.<Type usr=\"s:Sl5IndexQa\">Index<\/Type> == <Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type>, <Type usr=\"s:Sy4Selfxmfp\">Self<\/Type>.<Type usr=\"s:s32ExpressibleByStringInterpolationP0cD0Qa\">StringInterpolation<\/Type> == <Type usr=\"s:s26DefaultStringInterpolationV\">DefaultStringInterpolation<\/Type>, <Type usr=\"s:Sy4Selfxmfp\">Self<\/Type>.<Type usr=\"s:Sl11SubSequenceQa\">SubSequence<\/Type> : <Type usr=\"s:Sy\">StringProtocol<\/Type><\/Declaration>",
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "A type that can represent a string as a collection of characters."
            },
            "key.bb.doc_source" : "inherited"
          },
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension StringProtocol",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "StringProtocol"
            }
          ],
          "key.bb.type_module_name" : "Swift",
          "key.bodylength" : 121,
          "key.bodyoffset" : 1173,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.declaration" : "protocol StringProtocol : BidirectionalCollection, Comparable, ExpressibleByStringInterpolation, Hashable, LosslessStringConvertible, TextOutputStream, TextOutputStreamable where Self.Element == Character, Self.Index == String.Index, Self.StringInterpolation == DefaultStringInterpolation, Self.SubSequence : StringProtocol",
          "key.doc.discussion" : [
            {
              "Para" : "Do not declare new conformances to `StringProtocol`. Only the `String` and `Substring` types in the standard library are valid conforming types."
            }
          ],
          "key.doc.full_as_xml" : "<Class><Name>StringProtocol<\/Name><USR>s:Sy<\/USR><Declaration>protocol StringProtocol : BidirectionalCollection, Comparable, ExpressibleByStringInterpolation, Hashable, LosslessStringConvertible, TextOutputStream, TextOutputStreamable where Self.Element == Character, Self.Index == String.Index, Self.StringInterpolation == DefaultStringInterpolation, Self.SubSequence : StringProtocol<\/Declaration><CommentParts><Abstract><Para>A type that can represent a string as a collection of characters.<\/Para><\/Abstract><Discussion><Para>Do not declare new conformances to <codeVoice>StringProtocol<\/codeVoice>. Only the <codeVoice>String<\/codeVoice> and <codeVoice>Substring<\/codeVoice> types in the standard library are valid conforming types.<\/Para><\/Discussion><\/CommentParts><\/Class>",
          "key.doc.name" : "StringProtocol",
          "key.doc.type" : "Class",
          "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>StringProtocol<\/decl.name> : <ref.protocol usr=\"s:SK\">BidirectionalCollection<\/ref.protocol>, <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol>, <ref.protocol usr=\"s:s32ExpressibleByStringInterpolationP\">ExpressibleByStringInterpolation<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s25LosslessStringConvertibleP\">LosslessStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:s16TextOutputStreamP\">TextOutputStream<\/ref.protocol>, <ref.protocol usr=\"s:s20TextOutputStreamableP\">TextOutputStreamable<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:Sy4Selfxmfp\">Self<\/ref.generic_type_param>.<ref.associatedtype usr=\"s:ST7ElementQa\">Element<\/ref.associatedtype> == <ref.struct usr=\"s:SJ\">Character<\/ref.struct><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:Sy4Selfxmfp\">Self<\/ref.generic_type_param>.<ref.associatedtype usr=\"s:Sl5IndexQa\">Index<\/ref.associatedtype> == <ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:Sy4Selfxmfp\">Self<\/ref.generic_type_param>.<ref.associatedtype usr=\"s:s32ExpressibleByStringInterpolationP0cD0Qa\">StringInterpolation<\/ref.associatedtype> == <ref.struct usr=\"s:s26DefaultStringInterpolationV\">DefaultStringInterpolation<\/ref.struct><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:Sy4Selfxmfp\">Self<\/ref.generic_type_param>.<ref.associatedtype usr=\"s:Sl11SubSequenceQa\">SubSequence<\/ref.associatedtype> : <ref.protocol usr=\"s:Sy\">StringProtocol<\/ref.protocol><\/decl.generic_type_requirement><\/decl.protocol>",
          "key.groupname" : "String",
          "key.is_system" : true,
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 148,
          "key.modulename" : "Swift",
          "key.name" : "StringProtocol",
          "key.namelength" : 14,
          "key.nameoffset" : 1157,
          "key.offset" : 1147,
          "key.parsed_declaration" : "extension StringProtocol",
          "key.parsed_scope.end" : 67,
          "key.parsed_scope.start" : 63,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>func f()<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func f()",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "f"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "()"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 1186,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>f<\/decl.name>()<\/decl.function.method.instance>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 11,
              "key.line" : 64,
              "key.name" : "f()",
              "key.namelength" : 3,
              "key.nameoffset" : 1181,
              "key.offset" : 1176,
              "key.parsed_declaration" : "func f()",
              "key.parsed_scope.end" : 64,
              "key.parsed_scope.start" : 64,
              "key.typename" : "<Self where Self : StringProtocol> (Self) -> () -> ()",
              "key.typeusr" : "$syycD",
              "key.usr" : "s:Sy14SpmSwiftModuleE1fyyF"
            },
            {
              "key.annotated_decl" : "<Declaration>func hasSuffix(_ prefix: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func hasSuffix(_ prefix: String) -> Bool",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "hasSuffix"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "(String) -> Bool"
                }
              ],
              "key.bodylength" : 7,
              "key.bodyoffset" : 1285,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Extensions.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>hasSuffix<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>prefix<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 50,
              "key.line" : 66,
              "key.name" : "hasSuffix(_:)",
              "key.namelength" : 27,
              "key.nameoffset" : 1248,
              "key.offset" : 1243,
              "key.parsed_declaration" : "func hasSuffix(_ prefix: String) -> Bool",
              "key.parsed_scope.end" : 66,
              "key.parsed_scope.start" : 66,
              "key.related_decls" : [
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:Sy9hasSuffixySbSSF\">hasSuffix(_: String) -&gt; Bool<\/RelatedName>"
                },
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:SysE9hasSuffixySbqd__SyRd__lF\">hasSuffix&lt;Suffix&gt;(_: Suffix) -&gt; Bool where Suffix : StringProtocol<\/RelatedName>"
                }
              ],
              "key.typename" : "<Self where Self : StringProtocol> (Self) -> (String) -> Bool",
              "key.typeusr" : "$sySbSScD",
              "key.usr" : "s:Sy14SpmSwiftModuleE9hasSuffixySbSSF"
            }
          ],
          "key.typename" : "StringProtocol.Protocol",
          "key.typeusr" : "$sSy_pmD",
          "key.usr" : "s:Sy"
        }
      ]
    }
  },
  {
    "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift" : {
      "key.bb.module_name" : "SpmSwiftModule",
      "key.bb.pass_index" : 0,
      "key.bb.version" : "1.0",
      "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
      "key.length" : 1474,
      "key.offset" : 0,
      "key.substructure" : [
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public protocol FirstProtocol<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.length" : 6,
              "key.offset" : 16
            }
          ],
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "A protocol."
            },
            "key.bb.doc_source" : "docComment"
          },
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "public protocol FirstProtocol",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "protocol "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "FirstProtocol"
            }
          ],
          "key.bodylength" : 274,
          "key.bodyoffset" : 47,
          "key.column" : 17,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.column" : 17,
          "key.doc.comment" : "A protocol.",
          "key.doc.declaration" : "public protocol FirstProtocol",
          "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.doc.full_as_xml" : "<Class file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift\" line=\"2\" column=\"17\"><Name>FirstProtocol<\/Name><USR>s:14SpmSwiftModule13FirstProtocolP<\/USR><Declaration>public protocol FirstProtocol<\/Declaration><CommentParts><Abstract><Para>A protocol.<\/Para><\/Abstract><\/CommentParts><\/Class>",
          "key.doc.line" : 2,
          "key.doc.name" : "FirstProtocol",
          "key.doc.type" : "Class",
          "key.doclength" : 16,
          "key.docoffset" : 0,
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>FirstProtocol<\/decl.name><\/decl.protocol>",
          "key.kind" : "source.lang.swift.decl.protocol",
          "key.length" : 299,
          "key.line" : 2,
          "key.name" : "FirstProtocol",
          "key.namelength" : 13,
          "key.nameoffset" : 32,
          "key.offset" : 23,
          "key.parsed_declaration" : "public protocol FirstProtocol",
          "key.parsed_scope.end" : 16,
          "key.parsed_scope.start" : 2,
          "key.substructure" : [
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>func m(arg: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
              "key.bb.documentation" : {
                "key.bb.abstract" : {
                  "en" : "Brief note about m"
                },
                "key.bb.discussion" : {
                  "en" : "What m is all about."
                },
                "key.bb.doc_source" : "docComment",
                "key.bb.parameters" : [
                  {
                    "key.bb.param_desc" : {
                      "en" : "The argument"
                    },
                    "key.bb.param_name" : "arg"
                  }
                ],
                "key.bb.returns" : {
                  "en" : "The answer"
                }
              },
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func m(arg: Int) -> String",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "m"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "("
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "arg"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": Int) -> String"
                }
              ],
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.doc.column" : 8,
              "key.doc.comment" : "Brief note about m\n\nWhat m is all about.\n- parameter arg: The argument\n- returns: The answer",
              "key.doc.declaration" : "func m(arg: Int) -> String",
              "key.doc.discussion" : [
                {
                  "Para" : "What m is all about."
                }
              ],
              "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.doc.full_as_xml" : "<Function file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift\" line=\"8\" column=\"8\"><Name>m(arg:)<\/Name><USR>s:14SpmSwiftModule13FirstProtocolP1m3argSSSi_tF<\/USR><Declaration>func m(arg: Int) -&gt; String<\/Declaration><CommentParts><Abstract><Para>Brief note about m<\/Para><\/Abstract><Parameters><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The answer<\/Para><\/ResultDiscussion><Discussion><Para>What m is all about.<\/Para><\/Discussion><\/CommentParts><\/Function>",
              "key.doc.line" : 8,
              "key.doc.name" : "m(arg:)",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The argument"
                    }
                  ],
                  "name" : "arg"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "Para" : "The answer"
                }
              ],
              "key.doc.type" : "Function",
              "key.doclength" : 120,
              "key.docoffset" : 50,
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>m<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>arg<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 26,
              "key.line" : 8,
              "key.name" : "m(arg:)",
              "key.namelength" : 11,
              "key.nameoffset" : 177,
              "key.offset" : 172,
              "key.parsed_declaration" : "func m(arg: Int) -> String",
              "key.parsed_scope.end" : 8,
              "key.parsed_scope.start" : 8,
              "key.related_decls" : [
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule13FirstProtocolPAASH9AssocTypeRpzrlE1m3argSSSi_tF\">m(arg: Int) -&gt; String<\/RelatedName>"
                },
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule13FirstProtocolPAAE1m3argSSSi_tF\">m(arg: Int) -&gt; String<\/RelatedName>"
                }
              ],
              "key.typename" : "<Self where Self : FirstProtocol> (Self) -> (Int) -> String",
              "key.typeusr" : "$s3argSSSi_tcD",
              "key.usr" : "s:14SpmSwiftModule13FirstProtocolP1m3argSSSi_tF"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>associatedtype AssocType<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "associatedtype AssocType",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "associatedtype "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "AssocType"
                }
              ],
              "key.column" : 18,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.fully_annotated_decl" : "<decl.associatedtype><syntaxtype.keyword>associatedtype<\/syntaxtype.keyword> <decl.name>AssocType<\/decl.name><\/decl.associatedtype>",
              "key.kind" : "source.lang.swift.decl.associatedtype",
              "key.length" : 24,
              "key.line" : 10,
              "key.name" : "AssocType",
              "key.namelength" : 9,
              "key.nameoffset" : 217,
              "key.offset" : 202,
              "key.parsed_declaration" : "associatedtype AssocType",
              "key.parsed_scope.end" : 10,
              "key.parsed_scope.start" : 10,
              "key.typename" : "Self.AssocType.Type",
              "key.typeusr" : "$s9AssocType14SpmSwiftModule13FirstProtocolPQzmD",
              "key.usr" : "s:14SpmSwiftModule13FirstProtocolP9AssocTypeQa"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>func assocFunc() -&gt; <Type usr=\"s:14SpmSwiftModule13FirstProtocolP9AssocTypeQa\">AssocType<\/Type><\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func assocFunc() -> AssocType",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "assocFunc"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "() -> AssocType"
                }
              ],
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>assocFunc<\/decl.name>() -&gt; <decl.function.returntype><ref.associatedtype usr=\"s:14SpmSwiftModule13FirstProtocolP9AssocTypeQa\">AssocType<\/ref.associatedtype><\/decl.function.returntype><\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 29,
              "key.line" : 11,
              "key.name" : "assocFunc()",
              "key.namelength" : 11,
              "key.nameoffset" : 234,
              "key.offset" : 229,
              "key.parsed_declaration" : "func assocFunc() -> AssocType",
              "key.parsed_scope.end" : 11,
              "key.parsed_scope.start" : 11,
              "key.typename" : "<Self where Self : FirstProtocol> (Self) -> () -> Self.AssocType",
              "key.typeusr" : "$s9AssocTypeQzycD",
              "key.usr" : "s:14SpmSwiftModule13FirstProtocolP9assocFunc9AssocTypeQzyF"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>var getOnly: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "var getOnly: Int { get }",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "var "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "getOnly"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": Int"
                }
              ],
              "key.bodylength" : 5,
              "key.bodyoffset" : 280,
              "key.column" : 7,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>getOnly<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 24,
              "key.line" : 13,
              "key.name" : "getOnly",
              "key.namelength" : 7,
              "key.nameoffset" : 266,
              "key.offset" : 262,
              "key.parsed_declaration" : "var getOnly: Int",
              "key.parsed_scope.end" : 13,
              "key.parsed_scope.start" : 13,
              "key.typename" : "Int",
              "key.typeusr" : "$sSiD",
              "key.usr" : "s:14SpmSwiftModule13FirstProtocolP7getOnlySivp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>var setAndGet: <Type usr=\"s:Si\">Int<\/Type> { get set }<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "var setAndGet: Int { get set }",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "var "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "setAndGet"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": Int"
                }
              ],
              "key.bodylength" : 9,
              "key.bodyoffset" : 310,
              "key.column" : 7,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>setAndGet<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 30,
              "key.line" : 15,
              "key.name" : "setAndGet",
              "key.namelength" : 9,
              "key.nameoffset" : 294,
              "key.offset" : 290,
              "key.parsed_declaration" : "var setAndGet: Int",
              "key.parsed_scope.end" : 15,
              "key.parsed_scope.start" : 15,
              "key.setter_accessibility" : "source.lang.swift.accessibility.public",
              "key.typename" : "Int",
              "key.typeusr" : "$sSiD",
              "key.usr" : "s:14SpmSwiftModule13FirstProtocolP9setAndGetSivp"
            }
          ],
          "key.typename" : "FirstProtocol.Protocol",
          "key.typeusr" : "$s14SpmSwiftModule13FirstProtocol_pmD",
          "key.usr" : "s:14SpmSwiftModule13FirstProtocolP"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public protocol SecondProtocol : <Type usr=\"s:14SpmSwiftModule13FirstProtocolP\">FirstProtocol<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.length" : 6,
              "key.offset" : 324
            }
          ],
          "key.bb.inherited_types" : [
            {
              "key.bb.type_name" : "FirstProtocol"
            }
          ],
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "public protocol SecondProtocol: FirstProtocol",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "protocol "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "SecondProtocol"
            }
          ],
          "key.bodylength" : 43,
          "key.bodyoffset" : 371,
          "key.column" : 17,
          "key.decl_lang" : "source.lang.swift",
          "key.elements" : [
            {
              "key.kind" : "source.lang.swift.structure.elem.typeref",
              "key.length" : 13,
              "key.offset" : 356
            }
          ],
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>SecondProtocol<\/decl.name> : <ref.protocol usr=\"s:14SpmSwiftModule13FirstProtocolP\">FirstProtocol<\/ref.protocol><\/decl.protocol>",
          "key.inheritedtypes" : [
            {
              "key.name" : "FirstProtocol"
            }
          ],
          "key.kind" : "source.lang.swift.decl.protocol",
          "key.length" : 84,
          "key.line" : 18,
          "key.name" : "SecondProtocol",
          "key.namelength" : 14,
          "key.nameoffset" : 340,
          "key.offset" : 331,
          "key.parsed_declaration" : "public protocol SecondProtocol: FirstProtocol",
          "key.parsed_scope.end" : 20,
          "key.parsed_scope.start" : 18,
          "key.substructure" : [
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>func secondProtocolMethod() -&gt; <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func secondProtocolMethod() -> String",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "secondProtocolMethod"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "() -> String"
                }
              ],
              "key.column" : 10,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>secondProtocolMethod<\/decl.name>() -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 37,
              "key.line" : 19,
              "key.name" : "secondProtocolMethod()",
              "key.namelength" : 22,
              "key.nameoffset" : 381,
              "key.offset" : 376,
              "key.parsed_declaration" : "func secondProtocolMethod() -> String",
              "key.parsed_scope.end" : 19,
              "key.parsed_scope.start" : 19,
              "key.typename" : "<Self where Self : SecondProtocol> (Self) -> () -> String",
              "key.typeusr" : "$sSSycD",
              "key.usr" : "s:14SpmSwiftModule14SecondProtocolP06secondE6MethodSSyF"
            }
          ],
          "key.typename" : "SecondProtocol.Protocol",
          "key.typeusr" : "$s14SpmSwiftModule14SecondProtocol_pmD",
          "key.usr" : "s:14SpmSwiftModule14SecondProtocolP"
        },
        {
          "key.annotated_decl" : "<Declaration>public protocol SecondProtocol : <Type usr=\"s:14SpmSwiftModule13FirstProtocolP\">FirstProtocol<\/Type><\/Declaration>",
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension SecondProtocol",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "SecondProtocol"
            }
          ],
          "key.bodylength" : 256,
          "key.bodyoffset" : 443,
          "key.column" : 17,
          "key.decl_lang" : "source.lang.swift",
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>SecondProtocol<\/decl.name> : <ref.protocol usr=\"s:14SpmSwiftModule13FirstProtocolP\">FirstProtocol<\/ref.protocol><\/decl.protocol>",
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 283,
          "key.line" : 18,
          "key.name" : "SecondProtocol",
          "key.namelength" : 14,
          "key.nameoffset" : 427,
          "key.offset" : 417,
          "key.parsed_declaration" : "extension SecondProtocol",
          "key.parsed_scope.end" : 28,
          "key.parsed_scope.start" : 22,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>var getOnly: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
              "key.bb.documentation" : {
                "key.bb.abstract" : {
                  "en" : "A default implementation for a method of `FirstProtocol`\nprovided by `SecondProtocol`.\nFrom source we mess this up as an extension method.\nFrom symbolgraph we mess this up as being part of `FirstProtocol`."
                },
                "key.bb.doc_source" : "docComment"
              },
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "var getOnly: Int { get }",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "var "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "getOnly"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": Int"
                }
              ],
              "key.bodylength" : 3,
              "key.bodyoffset" : 694,
              "key.column" : 7,
              "key.decl_lang" : "source.lang.swift",
              "key.doc.column" : 7,
              "key.doc.comment" : "A default implementation for a method of `FirstProtocol`\nprovided by `SecondProtocol`.\nFrom source we mess this up as an extension method.\nFrom symbolgraph we mess this up as being part of `FirstProtocol`.",
              "key.doc.declaration" : "var getOnly: Int { get }",
              "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.doc.full_as_xml" : "<Other file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift\" line=\"27\" column=\"7\"><Name>getOnly<\/Name><USR>s:14SpmSwiftModule14SecondProtocolPAAE7getOnlySivp<\/USR><Declaration>var getOnly: Int { get }<\/Declaration><CommentParts><Abstract><Para>A default implementation for a method of <codeVoice>FirstProtocol<\/codeVoice> provided by <codeVoice>SecondProtocol<\/codeVoice>. From source we mess this up as an extension method. From symbolgraph we mess this up as being part of <codeVoice>FirstProtocol<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Other>",
              "key.doc.line" : 27,
              "key.doc.name" : "getOnly",
              "key.doc.type" : "Other",
              "key.doclength" : 228,
              "key.docoffset" : 446,
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>getOnly<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 22,
              "key.line" : 27,
              "key.name" : "getOnly",
              "key.namelength" : 7,
              "key.nameoffset" : 680,
              "key.offset" : 676,
              "key.parsed_declaration" : "var getOnly: Int",
              "key.parsed_scope.end" : 27,
              "key.parsed_scope.start" : 27,
              "key.related_decls" : [
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule13FirstProtocolP7getOnlySivp\">getOnly<\/RelatedName>"
                }
              ],
              "key.typename" : "Int",
              "key.typeusr" : "$sSiD",
              "key.usr" : "s:14SpmSwiftModule14SecondProtocolPAAE7getOnlySivp"
            }
          ],
          "key.typename" : "SecondProtocol.Protocol",
          "key.typeusr" : "$s14SpmSwiftModule14SecondProtocol_pmD",
          "key.usr" : "s:14SpmSwiftModule14SecondProtocolP"
        },
        {
          "key.annotated_decl" : "<Declaration>public protocol FirstProtocol<\/Declaration>",
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "A protocol."
            },
            "key.bb.doc_source" : "inherited"
          },
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension FirstProtocol",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "FirstProtocol"
            }
          ],
          "key.bodylength" : 49,
          "key.bodyoffset" : 727,
          "key.column" : 17,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.column" : 17,
          "key.doc.declaration" : "public protocol FirstProtocol",
          "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.doc.full_as_xml" : "<Class file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift\" line=\"2\" column=\"17\"><Name>FirstProtocol<\/Name><USR>s:14SpmSwiftModule13FirstProtocolP<\/USR><Declaration>public protocol FirstProtocol<\/Declaration><CommentParts><Abstract><Para>A protocol.<\/Para><\/Abstract><\/CommentParts><\/Class>",
          "key.doc.line" : 2,
          "key.doc.name" : "FirstProtocol",
          "key.doc.type" : "Class",
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>FirstProtocol<\/decl.name><\/decl.protocol>",
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 75,
          "key.line" : 2,
          "key.name" : "FirstProtocol",
          "key.namelength" : 13,
          "key.nameoffset" : 712,
          "key.offset" : 702,
          "key.parsed_declaration" : "extension FirstProtocol",
          "key.parsed_scope.end" : 33,
          "key.parsed_scope.start" : 30,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>func e()<\/Declaration>",
              "key.bb.documentation" : {
                "key.bb.abstract" : {
                  "en" : "A protocol extension method"
                },
                "key.bb.doc_source" : "docComment"
              },
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func e()",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "e"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "()"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 774,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.doc.column" : 8,
              "key.doc.comment" : "A protocol extension method",
              "key.doc.declaration" : "func e()",
              "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.doc.full_as_xml" : "<Function file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift\" line=\"32\" column=\"8\"><Name>e()<\/Name><USR>s:14SpmSwiftModule13FirstProtocolPAAE1eyyF<\/USR><Declaration>func e()<\/Declaration><CommentParts><Abstract><Para>A protocol extension method<\/Para><\/Abstract><\/CommentParts><\/Function>",
              "key.doc.line" : 32,
              "key.doc.name" : "e()",
              "key.doc.type" : "Function",
              "key.doclength" : 32,
              "key.docoffset" : 730,
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>e<\/decl.name>()<\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 11,
              "key.line" : 32,
              "key.name" : "e()",
              "key.namelength" : 3,
              "key.nameoffset" : 769,
              "key.offset" : 764,
              "key.parsed_declaration" : "func e()",
              "key.parsed_scope.end" : 32,
              "key.parsed_scope.start" : 32,
              "key.related_decls" : [
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule13FirstProtocolPAAE1e1ayqd___tAaBRd__lF\">e(a:)<\/RelatedName>"
                }
              ],
              "key.typename" : "<Self where Self : FirstProtocol> (Self) -> () -> ()",
              "key.typeusr" : "$syycD",
              "key.usr" : "s:14SpmSwiftModule13FirstProtocolPAAE1eyyF"
            }
          ],
          "key.typename" : "FirstProtocol.Protocol",
          "key.typeusr" : "$s14SpmSwiftModule13FirstProtocol_pmD",
          "key.usr" : "s:14SpmSwiftModule13FirstProtocolP"
        },
        {
          "key.annotated_decl" : "<Declaration>public protocol FirstProtocol<\/Declaration>",
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "A protocol."
            },
            "key.bb.doc_source" : "inherited"
          },
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension FirstProtocol",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "FirstProtocol"
            }
          ],
          "key.bodylength" : 87,
          "key.bodyoffset" : 804,
          "key.column" : 17,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.column" : 17,
          "key.doc.declaration" : "public protocol FirstProtocol",
          "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.doc.full_as_xml" : "<Class file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift\" line=\"2\" column=\"17\"><Name>FirstProtocol<\/Name><USR>s:14SpmSwiftModule13FirstProtocolP<\/USR><Declaration>public protocol FirstProtocol<\/Declaration><CommentParts><Abstract><Para>A protocol.<\/Para><\/Abstract><\/CommentParts><\/Class>",
          "key.doc.line" : 2,
          "key.doc.name" : "FirstProtocol",
          "key.doc.type" : "Class",
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>FirstProtocol<\/decl.name><\/decl.protocol>",
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 113,
          "key.line" : 2,
          "key.name" : "FirstProtocol",
          "key.namelength" : 13,
          "key.nameoffset" : 789,
          "key.offset" : 779,
          "key.parsed_declaration" : "extension FirstProtocol",
          "key.parsed_scope.end" : 38,
          "key.parsed_scope.start" : 35,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>func e&lt;C&gt;(a: <Type usr=\"s:14SpmSwiftModule13FirstProtocolPAAE1e1ayqd___tAaBRd__lF1CL_qd__mfp\">C<\/Type>) where <Type usr=\"s:14SpmSwiftModule13FirstProtocolPAAE1e1ayqd___tAaBRd__lF1CL_qd__mfp\">C<\/Type> : <Type usr=\"s:14SpmSwiftModule13FirstProtocolP\">FirstProtocol<\/Type><\/Declaration>",
              "key.bb.documentation" : {
                "key.bb.abstract" : {
                  "en" : "A generic protocol extension method"
                },
                "key.bb.doc_source" : "docComment"
              },
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func e<C>(a: C) where C: FirstProtocol",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "e"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "<C>("
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "a"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": C)"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 889,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.doc.column" : 8,
              "key.doc.comment" : "A generic protocol extension method",
              "key.doc.declaration" : "func e<C>(a: C) where C : SpmSwiftModule.FirstProtocol",
              "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.doc.full_as_xml" : "<Function file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift\" line=\"37\" column=\"8\"><Name>e(a:)<\/Name><USR>s:14SpmSwiftModule13FirstProtocolPAAE1e1ayqd___tAaBRd__lF<\/USR><Declaration>func e&lt;C&gt;(a: C) where C : SpmSwiftModule.FirstProtocol<\/Declaration><CommentParts><Abstract><Para>A generic protocol extension method<\/Para><\/Abstract><\/CommentParts><\/Function>",
              "key.doc.line" : 37,
              "key.doc.name" : "e(a:)",
              "key.doc.type" : "Function",
              "key.doclength" : 40,
              "key.docoffset" : 807,
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>e<\/decl.name>&lt;<decl.generic_type_param usr=\"s:14SpmSwiftModule13FirstProtocolPAAE1e1ayqd___tAaBRd__lF1CL_qd__mfp\"><decl.generic_type_param.name>C<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>a<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:14SpmSwiftModule13FirstProtocolPAAE1e1ayqd___tAaBRd__lF1CL_qd__mfp\">C<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:14SpmSwiftModule13FirstProtocolPAAE1e1ayqd___tAaBRd__lF1CL_qd__mfp\">C<\/ref.generic_type_param> : <ref.protocol usr=\"s:14SpmSwiftModule13FirstProtocolP\">FirstProtocol<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 41,
              "key.line" : 37,
              "key.name" : "e(a:)",
              "key.namelength" : 10,
              "key.nameoffset" : 854,
              "key.offset" : 849,
              "key.parsed_declaration" : "func e<C>(a: C) where C: FirstProtocol",
              "key.parsed_scope.end" : 37,
              "key.parsed_scope.start" : 37,
              "key.related_decls" : [
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule13FirstProtocolPAAE1eyyF\">e()<\/RelatedName>"
                }
              ],
              "key.substructure" : [
                {
                  "key.annotated_decl" : "<Declaration>C<\/Declaration>",
                  "key.bb.is_override" : false,
                  "key.bb.is_spi" : false,
                  "key.bb.swift_declaration" : "C",
                  "key.bb.swift_deprecated_everywhere" : false,
                  "key.bb.swift_name_pieces" : [
                    {
                      "key.bb.name_piece_is_name" : true,
                      "key.bb.name_piece_text" : "C"
                    }
                  ],
                  "key.column" : 10,
                  "key.decl_lang" : "source.lang.swift",
                  "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
                  "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>C<\/decl.generic_type_param.name><\/decl.generic_type_param>",
                  "key.kind" : "source.lang.swift.decl.generic_type_param",
                  "key.length" : 1,
                  "key.line" : 37,
                  "key.name" : "C",
                  "key.namelength" : 1,
                  "key.nameoffset" : 856,
                  "key.offset" : 856,
                  "key.parsed_declaration" : "func e<C",
                  "key.parsed_scope.end" : 37,
                  "key.parsed_scope.start" : 37,
                  "key.typename" : "C.Type",
                  "key.typeusr" : "$sqd__mD",
                  "key.usr" : "s:14SpmSwiftModule13FirstProtocolPAAE1e1ayqd___tAaBRd__lF1CL_qd__mfp"
                }
              ],
              "key.typename" : "<Self, C where Self : FirstProtocol, C : FirstProtocol> (Self) -> (C) -> ()",
              "key.typeusr" : "$s1ayqd___tc14SpmSwiftModule13FirstProtocolRd__luD",
              "key.usr" : "s:14SpmSwiftModule13FirstProtocolPAAE1e1ayqd___tAaBRd__lF"
            }
          ],
          "key.typename" : "FirstProtocol.Protocol",
          "key.typeusr" : "$s14SpmSwiftModule13FirstProtocol_pmD",
          "key.usr" : "s:14SpmSwiftModule13FirstProtocolP"
        },
        {
          "key.annotated_decl" : "<Declaration>public protocol FirstProtocol<\/Declaration>",
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "A protocol."
            },
            "key.bb.doc_source" : "inherited"
          },
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension FirstProtocol",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "FirstProtocol"
            }
          ],
          "key.bodylength" : 121,
          "key.bodyoffset" : 919,
          "key.column" : 17,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.column" : 17,
          "key.doc.declaration" : "public protocol FirstProtocol",
          "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.doc.full_as_xml" : "<Class file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift\" line=\"2\" column=\"17\"><Name>FirstProtocol<\/Name><USR>s:14SpmSwiftModule13FirstProtocolP<\/USR><Declaration>public protocol FirstProtocol<\/Declaration><CommentParts><Abstract><Para>A protocol.<\/Para><\/Abstract><\/CommentParts><\/Class>",
          "key.doc.line" : 2,
          "key.doc.name" : "FirstProtocol",
          "key.doc.type" : "Class",
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>FirstProtocol<\/decl.name><\/decl.protocol>",
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 147,
          "key.line" : 2,
          "key.name" : "FirstProtocol",
          "key.namelength" : 13,
          "key.nameoffset" : 904,
          "key.offset" : 894,
          "key.parsed_declaration" : "extension FirstProtocol",
          "key.parsed_scope.end" : 47,
          "key.parsed_scope.start" : 40,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>func m(arg: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
              "key.bb.documentation" : {
                "key.bb.abstract" : {
                  "en" : "Return a safe default."
                },
                "key.bb.discussion" : {
                  "en" : "There’s more: it’s the empty string."
                },
                "key.bb.doc_source" : "docComment"
              },
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func m(arg: Int) -> String",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "m"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "("
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "arg"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": Int) -> String"
                }
              ],
              "key.bodylength" : 10,
              "key.bodyoffset" : 1028,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.doc.column" : 8,
              "key.doc.comment" : "Return a safe default.\n\nThere's more: it's the empty string.",
              "key.doc.declaration" : "func m(arg: Int) -> String",
              "key.doc.discussion" : [
                {
                  "Para" : "There’s more: it’s the empty string."
                }
              ],
              "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.doc.full_as_xml" : "<Function file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift\" line=\"44\" column=\"8\"><Name>m(arg:)<\/Name><USR>s:14SpmSwiftModule13FirstProtocolPAAE1m3argSSSi_tF<\/USR><Declaration>func m(arg: Int) -&gt; String<\/Declaration><CommentParts><Abstract><Para>Return a safe default.<\/Para><\/Abstract><Discussion><Para>There’s more: it’s the empty string.<\/Para><\/Discussion><\/CommentParts><\/Function>",
              "key.doc.line" : 44,
              "key.doc.name" : "m(arg:)",
              "key.doc.type" : "Function",
              "key.doclength" : 76,
              "key.docoffset" : 922,
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>m<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>arg<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 39,
              "key.line" : 44,
              "key.name" : "m(arg:)",
              "key.namelength" : 11,
              "key.nameoffset" : 1005,
              "key.offset" : 1000,
              "key.parsed_declaration" : "func m(arg: Int) -> String",
              "key.parsed_scope.end" : 46,
              "key.parsed_scope.start" : 44,
              "key.related_decls" : [
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule13FirstProtocolP1m3argSSSi_tF\">m(arg: Int) -&gt; String<\/RelatedName>"
                },
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule13FirstProtocolPAASH9AssocTypeRpzrlE1m3argSSSi_tF\">m(arg: Int) -&gt; String<\/RelatedName>"
                }
              ],
              "key.typename" : "<Self where Self : FirstProtocol> (Self) -> (Int) -> String",
              "key.typeusr" : "$s3argSSSi_tcD",
              "key.usr" : "s:14SpmSwiftModule13FirstProtocolPAAE1m3argSSSi_tF"
            }
          ],
          "key.typename" : "FirstProtocol.Protocol",
          "key.typeusr" : "$s14SpmSwiftModule13FirstProtocol_pmD",
          "key.usr" : "s:14SpmSwiftModule13FirstProtocolP"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>protocol P1<\/Declaration>",
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "protocol P1",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "protocol "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "P1"
            }
          ],
          "key.bodylength" : 0,
          "key.bodyoffset" : 1056,
          "key.column" : 10,
          "key.decl_lang" : "source.lang.swift",
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>P1<\/decl.name><\/decl.protocol>",
          "key.kind" : "source.lang.swift.decl.protocol",
          "key.length" : 14,
          "key.line" : 49,
          "key.name" : "P1",
          "key.namelength" : 2,
          "key.nameoffset" : 1052,
          "key.offset" : 1043,
          "key.parsed_declaration" : "protocol P1",
          "key.parsed_scope.end" : 49,
          "key.parsed_scope.start" : 49,
          "key.typename" : "P1.Protocol",
          "key.typeusr" : "$s14SpmSwiftModule2P1_pmD",
          "key.usr" : "s:14SpmSwiftModule2P1P"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>protocol P2<\/Declaration>",
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "protocol P2",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "protocol "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "P2"
            }
          ],
          "key.bodylength" : 0,
          "key.bodyoffset" : 1071,
          "key.column" : 10,
          "key.decl_lang" : "source.lang.swift",
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>P2<\/decl.name><\/decl.protocol>",
          "key.kind" : "source.lang.swift.decl.protocol",
          "key.length" : 14,
          "key.line" : 50,
          "key.name" : "P2",
          "key.namelength" : 2,
          "key.nameoffset" : 1067,
          "key.offset" : 1058,
          "key.parsed_declaration" : "protocol P2",
          "key.parsed_scope.end" : 50,
          "key.parsed_scope.start" : 50,
          "key.typename" : "P2.Protocol",
          "key.typeusr" : "$s14SpmSwiftModule2P2_pmD",
          "key.usr" : "s:14SpmSwiftModule2P2P"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>struct S1 : <Type usr=\"s:14SpmSwiftModule2P1P\">P1<\/Type><\/Declaration>",
          "key.bb.inherited_types" : [
            {
              "key.bb.type_name" : "P1"
            }
          ],
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "struct S1: P1",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "struct "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "S1"
            }
          ],
          "key.bodylength" : 0,
          "key.bodyoffset" : 1089,
          "key.column" : 8,
          "key.decl_lang" : "source.lang.swift",
          "key.elements" : [
            {
              "key.kind" : "source.lang.swift.structure.elem.typeref",
              "key.length" : 2,
              "key.offset" : 1085
            }
          ],
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>S1<\/decl.name> : <ref.protocol usr=\"s:14SpmSwiftModule2P1P\">P1<\/ref.protocol><\/decl.struct>",
          "key.inheritedtypes" : [
            {
              "key.name" : "P1"
            }
          ],
          "key.kind" : "source.lang.swift.decl.struct",
          "key.length" : 16,
          "key.line" : 52,
          "key.name" : "S1",
          "key.namelength" : 2,
          "key.nameoffset" : 1081,
          "key.offset" : 1074,
          "key.parsed_declaration" : "struct S1: P1",
          "key.parsed_scope.end" : 52,
          "key.parsed_scope.start" : 52,
          "key.typename" : "S1.Type",
          "key.typeusr" : "$s14SpmSwiftModule2S1VmD",
          "key.usr" : "s:14SpmSwiftModule2S1V"
        },
        {
          "key.annotated_decl" : "<Declaration>struct S1 : <Type usr=\"s:14SpmSwiftModule2P1P\">P1<\/Type><\/Declaration>",
          "key.bb.inherited_types" : [
            {
              "key.bb.type_name" : "CustomStringConvertible"
            }
          ],
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension S1: CustomStringConvertible",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "S1"
            }
          ],
          "key.bodylength" : 34,
          "key.bodyoffset" : 1131,
          "key.column" : 8,
          "key.decl_lang" : "source.lang.swift",
          "key.elements" : [
            {
              "key.kind" : "source.lang.swift.structure.elem.typeref",
              "key.length" : 23,
              "key.offset" : 1106
            }
          ],
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>S1<\/decl.name> : <ref.protocol usr=\"s:14SpmSwiftModule2P1P\">P1<\/ref.protocol><\/decl.struct>",
          "key.inheritedtypes" : [
            {
              "key.name" : "CustomStringConvertible"
            }
          ],
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 74,
          "key.line" : 52,
          "key.name" : "S1",
          "key.namelength" : 2,
          "key.nameoffset" : 1102,
          "key.offset" : 1092,
          "key.parsed_declaration" : "extension S1: CustomStringConvertible",
          "key.parsed_scope.end" : 56,
          "key.parsed_scope.start" : 54,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>var description: <Type usr=\"s:SS\">String<\/Type> { get }<\/Declaration>",
              "key.bb.documentation" : {
                "key.bb.abstract" : {
                  "en" : "A textual representation of this instance."
                },
                "key.bb.discussion" : {
                  "en" : "Calling this property directly is discouraged. Instead, convert an instance of any type to a string by using the `String(describing:)` initializer. This initializer works with any type, and uses the custom `description` property for types that conform to `CustomStringConvertible`:\n\n``` swift\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n\/\/ Prints \"(21, 30)\"\n\n```\n\nThe conversion of `p` to a string in the assignment to `s` uses the `Point` type’s `description` property."
                },
                "key.bb.doc_source" : "inherited"
              },
              "key.bb.is_override" : true,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "var description: String { get }",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "var "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "description"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": String"
                }
              ],
              "key.bodylength" : 4,
              "key.bodyoffset" : 1159,
              "key.column" : 7,
              "key.decl_lang" : "source.lang.swift",
              "key.doc.declaration" : "var description: String { get }",
              "key.doc.discussion" : [
                {
                  "Para" : "Calling this property directly is discouraged. Instead, convert an instance of any type to a string by using the `String(describing:)` initializer. This initializer works with any type, and uses the custom `description` property for types that conform to `CustomStringConvertible`:"
                },
                {
                  "CodeListing" : ""
                },
                {
                  "Para" : "The conversion of `p` to a string in the assignment to `s` uses the `Point` type’s `description` property."
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>description<\/Name><USR>s:s23CustomStringConvertibleP11descriptionSSvp<\/USR><Declaration>var description: String { get }<\/Declaration><CommentParts><Abstract><Para>A textual representation of this instance.<\/Para><\/Abstract><Discussion><Para>Calling this property directly is discouraged. Instead, convert an instance of any type to a string by using the <codeVoice>String(describing:)<\/codeVoice> initializer. This initializer works with any type, and uses the custom <codeVoice>description<\/codeVoice> property for types that conform to <codeVoice>CustomStringConvertible<\/codeVoice>:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[struct Point: CustomStringConvertible {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    let x: Int, y: Int]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    var description: String {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        return \"(\\(x), \\(y))\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let p = Point(x: 21, y: 30)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let s = String(describing: p)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(s)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"(21, 30)\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The conversion of <codeVoice>p<\/codeVoice> to a string in the assignment to <codeVoice>s<\/codeVoice> uses the <codeVoice>Point<\/codeVoice> type’s <codeVoice>description<\/codeVoice> property.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>CustomStringConvertible<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "description",
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>description<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 30,
              "key.line" : 55,
              "key.name" : "description",
              "key.namelength" : 11,
              "key.nameoffset" : 1138,
              "key.offset" : 1134,
              "key.overrides" : [
                {
                  "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSvp"
                }
              ],
              "key.parsed_declaration" : "var description: String",
              "key.parsed_scope.end" : 55,
              "key.parsed_scope.start" : 55,
              "key.typename" : "String",
              "key.typeusr" : "$sSSD",
              "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSvp"
            }
          ],
          "key.typename" : "S1.Type",
          "key.typeusr" : "$s14SpmSwiftModule2S1VmD",
          "key.usr" : "s:14SpmSwiftModule2S1V"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>struct S2&lt;T&gt; : <Type usr=\"s:14SpmSwiftModule2P1P\">P1<\/Type> where <Type usr=\"s:14SpmSwiftModule2S2V1Txmfp\">T<\/Type> : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
          "key.bb.inherited_types" : [
            {
              "key.bb.type_name" : "P1"
            }
          ],
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "struct S2<T>: P1 where T: Equatable",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "struct "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "S2"
            }
          ],
          "key.bodylength" : 25,
          "key.bodyoffset" : 1205,
          "key.column" : 8,
          "key.decl_lang" : "source.lang.swift",
          "key.elements" : [
            {
              "key.kind" : "source.lang.swift.structure.elem.typeref",
              "key.length" : 2,
              "key.offset" : 1182
            }
          ],
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>S2<\/decl.name>&lt;<decl.generic_type_param usr=\"s:14SpmSwiftModule2S2V1Txmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:14SpmSwiftModule2P1P\">P1<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:14SpmSwiftModule2S2V1Txmfp\">T<\/ref.generic_type_param> : <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
          "key.inheritedtypes" : [
            {
              "key.name" : "P1"
            }
          ],
          "key.kind" : "source.lang.swift.decl.struct",
          "key.length" : 63,
          "key.line" : 58,
          "key.name" : "S2",
          "key.namelength" : 2,
          "key.nameoffset" : 1175,
          "key.offset" : 1168,
          "key.parsed_declaration" : "struct S2<T>: P1 where T: Equatable",
          "key.parsed_scope.end" : 60,
          "key.parsed_scope.start" : 58,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>T<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "T",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "T"
                }
              ],
              "key.column" : 11,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
              "key.kind" : "source.lang.swift.decl.generic_type_param",
              "key.length" : 1,
              "key.line" : 58,
              "key.name" : "T",
              "key.namelength" : 1,
              "key.nameoffset" : 1178,
              "key.offset" : 1178,
              "key.parsed_declaration" : "struct S2<T",
              "key.parsed_scope.end" : 58,
              "key.parsed_scope.start" : 58,
              "key.typename" : "T.Type",
              "key.typeusr" : "$sxmD",
              "key.usr" : "s:14SpmSwiftModule2S2V1Txmfp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>func equatables2()<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func equatables2()",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "equatables2"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "()"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 1228,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>equatables2<\/decl.name>()<\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 21,
              "key.line" : 59,
              "key.name" : "equatables2()",
              "key.namelength" : 13,
              "key.nameoffset" : 1213,
              "key.offset" : 1208,
              "key.parsed_declaration" : "func equatables2()",
              "key.parsed_scope.end" : 59,
              "key.parsed_scope.start" : 59,
              "key.typename" : "<T where T : Equatable> (S2<T>) -> () -> ()",
              "key.typeusr" : "$syycD",
              "key.usr" : "s:14SpmSwiftModule2S2V11equatables2yyF"
            }
          ],
          "key.typename" : "S2<T>.Type",
          "key.typeusr" : "$s14SpmSwiftModule2S2VyxGmD",
          "key.usr" : "s:14SpmSwiftModule2S2V"
        },
        {
          "key.annotated_decl" : "<Declaration>struct S2&lt;T&gt; : <Type usr=\"s:14SpmSwiftModule2P1P\">P1<\/Type> where <Type usr=\"s:14SpmSwiftModule2S2V1Txmfp\">T<\/Type> : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
          "key.bb.inherited_types" : [
            {
              "key.bb.type_name" : "P2"
            }
          ],
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension S2: P2 where T: Comparable",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "S2"
            }
          ],
          "key.bodylength" : 26,
          "key.bodyoffset" : 1271,
          "key.column" : 8,
          "key.decl_lang" : "source.lang.swift",
          "key.elements" : [
            {
              "key.kind" : "source.lang.swift.structure.elem.typeref",
              "key.length" : 2,
              "key.offset" : 1247
            }
          ],
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>S2<\/decl.name>&lt;<decl.generic_type_param usr=\"s:14SpmSwiftModule2S2V1Txmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:14SpmSwiftModule2P1P\">P1<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:14SpmSwiftModule2S2V1Txmfp\">T<\/ref.generic_type_param> : <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
          "key.inheritedtypes" : [
            {
              "key.name" : "P2"
            }
          ],
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 65,
          "key.line" : 58,
          "key.name" : "S2",
          "key.namelength" : 2,
          "key.nameoffset" : 1243,
          "key.offset" : 1233,
          "key.parsed_declaration" : "extension S2: P2 where T: Comparable",
          "key.parsed_scope.end" : 64,
          "key.parsed_scope.start" : 62,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>func comparables2()<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func comparables2()",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "comparables2"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "()"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 1295,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>comparables2<\/decl.name>()<\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 22,
              "key.line" : 63,
              "key.name" : "comparables2()",
              "key.namelength" : 14,
              "key.nameoffset" : 1279,
              "key.offset" : 1274,
              "key.parsed_declaration" : "func comparables2()",
              "key.parsed_scope.end" : 63,
              "key.parsed_scope.start" : 63,
              "key.typename" : "<T where T : Comparable> (S2<T>) -> () -> ()",
              "key.typeusr" : "$syycD",
              "key.usr" : "s:14SpmSwiftModule2S2VAASLRzrlE12comparables2yyF"
            }
          ],
          "key.typename" : "S2<T>.Type",
          "key.typeusr" : "$s14SpmSwiftModule2S2VyxGmD",
          "key.usr" : "s:14SpmSwiftModule2S2V"
        },
        {
          "key.annotated_decl" : "<Declaration>struct S2&lt;T&gt; : <Type usr=\"s:14SpmSwiftModule2P1P\">P1<\/Type> where <Type usr=\"s:14SpmSwiftModule2S2V1Txmfp\">T<\/Type> : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
          "key.bb.inherited_types" : [
            {
              "key.bb.type_name" : "Equatable"
            }
          ],
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension S2: Equatable where T: Equatable",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "S2"
            }
          ],
          "key.bodylength" : 26,
          "key.bodyoffset" : 1344,
          "key.column" : 8,
          "key.decl_lang" : "source.lang.swift",
          "key.elements" : [
            {
              "key.kind" : "source.lang.swift.structure.elem.typeref",
              "key.length" : 9,
              "key.offset" : 1314
            }
          ],
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
          "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>S2<\/decl.name>&lt;<decl.generic_type_param usr=\"s:14SpmSwiftModule2S2V1Txmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:14SpmSwiftModule2P1P\">P1<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:14SpmSwiftModule2S2V1Txmfp\">T<\/ref.generic_type_param> : <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
          "key.inheritedtypes" : [
            {
              "key.name" : "Equatable"
            }
          ],
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 71,
          "key.line" : 58,
          "key.name" : "S2",
          "key.namelength" : 2,
          "key.nameoffset" : 1310,
          "key.offset" : 1300,
          "key.parsed_declaration" : "extension S2: Equatable where T: Equatable",
          "key.parsed_scope.end" : 68,
          "key.parsed_scope.start" : 66,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>func equatables22()<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func equatables22()",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "equatables22"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "()"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 1368,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>equatables22<\/decl.name>()<\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 22,
              "key.line" : 67,
              "key.name" : "equatables22()",
              "key.namelength" : 14,
              "key.nameoffset" : 1352,
              "key.offset" : 1347,
              "key.parsed_declaration" : "func equatables22()",
              "key.parsed_scope.end" : 67,
              "key.parsed_scope.start" : 67,
              "key.typename" : "<T where T : Equatable> (S2<T>) -> () -> ()",
              "key.typeusr" : "$syycD",
              "key.usr" : "s:14SpmSwiftModule2S2V12equatables22yyF"
            }
          ],
          "key.typename" : "S2<T>.Type",
          "key.typeusr" : "$s14SpmSwiftModule2S2VyxGmD",
          "key.usr" : "s:14SpmSwiftModule2S2V"
        },
        {
          "key.annotated_decl" : "<Declaration>@frozen struct Dictionary&lt;Key, Value&gt; where <Type usr=\"s:SD3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SH\">Hashable<\/Type><\/Declaration>",
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "A collection whose elements are key-value pairs."
            },
            "key.bb.doc_source" : "inherited"
          },
          "key.bb.inherited_types" : [
            {
              "key.bb.type_name" : "P2"
            }
          ],
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension Dictionary: P2",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "Dictionary"
            }
          ],
          "key.bb.type_module_name" : "Swift",
          "key.bodylength" : 0,
          "key.bodyoffset" : 1399,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.declaration" : "@frozen struct Dictionary<Key, Value> where Key : Hashable",
          "key.doc.discussion" : [
            {
              "Para" : "A dictionary is a type of hash table, providing fast access to the entries it contains. Each entry in the table is identified using its key, which is a hashable type such as a string or number. You use that key to retrieve the corresponding value, which can be any object. In other languages, similar data types are known as hashes or associated arrays."
            },
            {
              "Para" : "Create a new dictionary by using a dictionary literal. A dictionary literal is a comma-separated list of key-value pairs, in which a colon separates each key from its associated value, surrounded by square brackets. You can assign a dictionary literal to a variable or constant or pass it to a function that expects a dictionary."
            },
            {
              "Para" : "Here’s how you would create a dictionary of HTTP response codes and their related messages:"
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "The `responseMessages` variable is inferred to have type `[Int: String]`. The `Key` type of the dictionary is `Int`, and the `Value` type of the dictionary is `String`."
            },
            {
              "Para" : "To create a dictionary with no key-value pairs, use an empty dictionary literal (`[:]`)."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "Any type that conforms to the `Hashable` protocol can be used as a dictionary’s `Key` type, including all of Swift’s basic types. You can use your own custom types as dictionary keys by making them conform to the `Hashable` protocol."
            },
            {
              "Para" : "The most common way to access values in a dictionary is to use a key as a subscript. Subscripting with a key takes the following form:"
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "Subscripting a dictionary with a key returns an optional value, because a dictionary might not hold a value for the key that you use in the subscript."
            },
            {
              "Para" : "The next example uses key-based subscripting of the `responseMessages` dictionary with two keys that exist in the dictionary and one that does not."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "You can also update, modify, or remove keys and values from a dictionary using the key-based subscript. To add a new key-value pair, assign a value to a key that isn’t yet a part of the dictionary."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "Update an existing value by assigning a new value to a key that already exists in the dictionary. If you assign `nil` to an existing key, the key and its associated value are removed. The following example updates the value for the `404` code to be simply “Not found” and removes the key-value pair for the `500` code entirely."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "In a mutable `Dictionary` instance, you can modify in place a value that you’ve accessed through a keyed subscript. The code sample below declares a dictionary called `interestingNumbers` with string keys and values that are integer arrays, then sorts each array in-place in descending order."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "Every dictionary is an unordered collection of key-value pairs. You can iterate over a dictionary using a `for`-`in` loop, decomposing each key-value pair into the elements of a tuple."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "The order of key-value pairs in a dictionary is stable between mutations but is otherwise unpredictable. If you need an ordered collection of key-value pairs and don’t need the fast key lookup that `Dictionary` provides, see the `KeyValuePairs` type for an alternative."
            },
            {
              "Para" : "You can search a dictionary’s contents for a particular value using the `contains(where:)` or `firstIndex(where:)` methods supplied by default implementation. The following example checks to see if `imagePaths` contains any paths in the `\"\/glyphs\"` directory:"
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "Note that in this example, `imagePaths` is subscripted using a dictionary index. Unlike the key-based subscript, the index-based subscript returns the corresponding key-value pair as a non-optional tuple."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "A dictionary’s indices stay valid across additions to the dictionary as long as the dictionary has enough capacity to store the added values without allocating more buffer. When a dictionary outgrows its buffer, existing indices may be invalidated without any notification."
            },
            {
              "Para" : "When you know how many new values you’re adding to a dictionary, use the `init(minimumCapacity:)` initializer to allocate the correct amount of buffer."
            },
            {
              "Para" : "You can bridge between `Dictionary` and `NSDictionary` using the `as` operator. For bridging to be possible, the `Key` and `Value` types of a dictionary must be classes, `@objc` protocols, or types that bridge to Foundation types."
            },
            {
              "Para" : "Bridging from `Dictionary` to `NSDictionary` always takes O(1) time and space. When the dictionary’s `Key` and `Value` types are neither classes nor `@objc` protocols, any required bridging of elements occurs at the first access of each element. For this reason, the first operation that uses the contents of the dictionary may take O()."
            },
            {
              "Para" : "Bridging from `NSDictionary` to `Dictionary` first calls the `copy(with:)` method (`- copyWithZone:` in Objective-C) on the dictionary to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time. For instances of `NSDictionary` that are already immutable, `copy(with:)` usually returns the same dictionary in O(1) time; otherwise, the copying performance is unspecified. The instances of `NSDictionary` and `Dictionary` share buffer using the same copy-on-write optimization that is used when two instances of `Dictionary` share buffer."
            }
          ],
          "key.doc.full_as_xml" : "<Class><Name>Dictionary<\/Name><USR>s:SD<\/USR><Declaration>@frozen struct Dictionary&lt;Key, Value&gt; where Key : Hashable<\/Declaration><CommentParts><Abstract><Para>A collection whose elements are key-value pairs.<\/Para><\/Abstract><Discussion><Para>A dictionary is a type of hash table, providing fast access to the entries it contains. Each entry in the table is identified using its key, which is a hashable type such as a string or number. You use that key to retrieve the corresponding value, which can be any object. In other languages, similar data types are known as hashes or associated arrays.<\/Para><Para>Create a new dictionary by using a dictionary literal. A dictionary literal is a comma-separated list of key-value pairs, in which a colon separates each key from its associated value, surrounded by square brackets. You can assign a dictionary literal to a variable or constant or pass it to a function that expects a dictionary.<\/Para><Para>Here’s how you would create a dictionary of HTTP response codes and their related messages:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var responseMessages = [200: \"OK\",]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[                        403: \"Access forbidden\",]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[                        404: \"File not found\",]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[                        500: \"Internal server error\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>responseMessages<\/codeVoice> variable is inferred to have type <codeVoice>[Int: String]<\/codeVoice>. The <codeVoice>Key<\/codeVoice> type of the dictionary is <codeVoice>Int<\/codeVoice>, and the <codeVoice>Value<\/codeVoice> type of the dictionary is <codeVoice>String<\/codeVoice>.<\/Para><Para>To create a dictionary with no key-value pairs, use an empty dictionary literal (<codeVoice>[:]<\/codeVoice>).<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var emptyDict: [String: String] = [:]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Any type that conforms to the <codeVoice>Hashable<\/codeVoice> protocol can be used as a dictionary’s <codeVoice>Key<\/codeVoice> type, including all of Swift’s basic types. You can use your own custom types as dictionary keys by making them conform to the <codeVoice>Hashable<\/codeVoice> protocol.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Getting and Setting Dictionary Values<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>The most common way to access values in a dictionary is to use a key as a subscript. Subscripting with a key takes the following form:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(responseMessages[200])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"OK\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Subscripting a dictionary with a key returns an optional value, because a dictionary might not hold a value for the key that you use in the subscript.<\/Para><Para>The next example uses key-based subscripting of the <codeVoice>responseMessages<\/codeVoice> dictionary with two keys that exist in the dictionary and one that does not.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let httpResponseCodes = [200, 403, 301]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for code in httpResponseCodes {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    if let message = responseMessages[code] {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        print(\"Response \\(code): \\(message)\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    } else {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        print(\"Unknown response \\(code)\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Response 200: OK\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Response 403: Access forbidden\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Unknown response 301\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can also update, modify, or remove keys and values from a dictionary using the key-based subscript. To add a new key-value pair, assign a value to a key that isn’t yet a part of the dictionary.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[responseMessages[301] = \"Moved permanently\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(responseMessages[301])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"Moved permanently\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Update an existing value by assigning a new value to a key that already exists in the dictionary. If you assign <codeVoice>nil<\/codeVoice> to an existing key, the key and its associated value are removed. The following example updates the value for the <codeVoice>404<\/codeVoice> code to be simply “Not found” and removes the key-value pair for the <codeVoice>500<\/codeVoice> code entirely.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[responseMessages[404] = \"Not found\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[responseMessages[500] = nil]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(responseMessages)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[301: \"Moved permanently\", 200: \"OK\", 403: \"Access forbidden\", 404: \"Not found\"]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>In a mutable <codeVoice>Dictionary<\/codeVoice> instance, you can modify in place a value that you’ve accessed through a keyed subscript. The code sample below declares a dictionary called <codeVoice>interestingNumbers<\/codeVoice> with string keys and values that are integer arrays, then sorts each array in-place in descending order.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var interestingNumbers = [\"primes\": [2, 3, 5, 7, 11, 13, 17],]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[                          \"triangular\": [1, 3, 6, 10, 15, 21, 28],]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[                          \"hexagonal\": [1, 6, 15, 28, 45, 66, 91]]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for key in interestingNumbers.keys {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    interestingNumbers[key]?.sort(by: >)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(interestingNumbers[\"primes\"]!)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[17, 13, 11, 7, 5, 3, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Iterating Over the Contents of a Dictionary<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Every dictionary is an unordered collection of key-value pairs. You can iterate over a dictionary using a <codeVoice>for<\/codeVoice>-<codeVoice>in<\/codeVoice> loop, decomposing each key-value pair into the elements of a tuple.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let imagePaths = [\"star\": \"\/glyphs\/star.png\",]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[                  \"portrait\": \"\/images\/content\/portrait.jpg\",]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[                  \"spacer\": \"\/images\/shared\/spacer.gif\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for (name, path) in imagePaths {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"The path to '\\(name)' is '\\(path)'.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"The path to 'star' is '\/glyphs\/star.png'.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"The path to 'portrait' is '\/images\/content\/portrait.jpg'.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"The path to 'spacer' is '\/images\/shared\/spacer.gif'.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The order of key-value pairs in a dictionary is stable between mutations but is otherwise unpredictable. If you need an ordered collection of key-value pairs and don’t need the fast key lookup that <codeVoice>Dictionary<\/codeVoice> provides, see the <codeVoice>KeyValuePairs<\/codeVoice> type for an alternative.<\/Para><Para>You can search a dictionary’s contents for a particular value using the <codeVoice>contains(where:)<\/codeVoice> or <codeVoice>firstIndex(where:)<\/codeVoice> methods supplied by default implementation. The following example checks to see if <codeVoice>imagePaths<\/codeVoice> contains any paths in the <codeVoice>&quot;\/glyphs&quot;<\/codeVoice> directory:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let glyphIndex = imagePaths.firstIndex(where: { $0.value.hasPrefix(\"\/glyphs\") })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let index = glyphIndex {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"The '\\(imagePaths[index].key)' image is a glyph.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[} else {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"No glyphs found!\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"The 'star' image is a glyph.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Note that in this example, <codeVoice>imagePaths<\/codeVoice> is subscripted using a dictionary index. Unlike the key-based subscript, the index-based subscript returns the corresponding key-value pair as a non-optional tuple.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(imagePaths[glyphIndex!])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"(key: \"star\", value: \"\/glyphs\/star.png\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>A dictionary’s indices stay valid across additions to the dictionary as long as the dictionary has enough capacity to store the added values without allocating more buffer. When a dictionary outgrows its buffer, existing indices may be invalidated without any notification.<\/Para><Para>When you know how many new values you’re adding to a dictionary, use the <codeVoice>init(minimumCapacity:)<\/codeVoice> initializer to allocate the correct amount of buffer.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Bridging Between Dictionary and NSDictionary<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can bridge between <codeVoice>Dictionary<\/codeVoice> and <codeVoice>NSDictionary<\/codeVoice> using the <codeVoice>as<\/codeVoice> operator. For bridging to be possible, the <codeVoice>Key<\/codeVoice> and <codeVoice>Value<\/codeVoice> types of a dictionary must be classes, <codeVoice>@objc<\/codeVoice> protocols, or types that bridge to Foundation types.<\/Para><Para>Bridging from <codeVoice>Dictionary<\/codeVoice> to <codeVoice>NSDictionary<\/codeVoice> always takes O(1) time and space. When the dictionary’s <codeVoice>Key<\/codeVoice> and <codeVoice>Value<\/codeVoice> types are neither classes nor <codeVoice>@objc<\/codeVoice> protocols, any required bridging of elements occurs at the first access of each element. For this reason, the first operation that uses the contents of the dictionary may take O(<emphasis>n<\/emphasis>).<\/Para><Para>Bridging from <codeVoice>NSDictionary<\/codeVoice> to <codeVoice>Dictionary<\/codeVoice> first calls the <codeVoice>copy(with:)<\/codeVoice> method (<codeVoice>- copyWithZone:<\/codeVoice> in Objective-C) on the dictionary to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time. For instances of <codeVoice>NSDictionary<\/codeVoice> that are already immutable, <codeVoice>copy(with:)<\/codeVoice> usually returns the same dictionary in O(1) time; otherwise, the copying performance is unspecified. The instances of <codeVoice>NSDictionary<\/codeVoice> and <codeVoice>Dictionary<\/codeVoice> share buffer using the same copy-on-write optimization that is used when two instances of <codeVoice>Dictionary<\/codeVoice> share buffer.<\/Para><\/Discussion><\/CommentParts><\/Class>",
          "key.doc.name" : "Dictionary",
          "key.doc.type" : "Class",
          "key.elements" : [
            {
              "key.kind" : "source.lang.swift.structure.elem.typeref",
              "key.length" : 2,
              "key.offset" : 1395
            }
          ],
          "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Dictionary<\/decl.name>&lt;<decl.generic_type_param usr=\"s:SD3Keyxmfp\"><decl.generic_type_param.name>Key<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:SD5Valueq_mfp\"><decl.generic_type_param.name>Value<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:SD3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
          "key.groupname" : "Collection\/HashedCollections",
          "key.inheritedtypes" : [
            {
              "key.name" : "P2"
            }
          ],
          "key.is_system" : true,
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 27,
          "key.modulename" : "Swift",
          "key.name" : "Dictionary",
          "key.namelength" : 10,
          "key.nameoffset" : 1383,
          "key.offset" : 1373,
          "key.parsed_declaration" : "extension Dictionary: P2",
          "key.parsed_scope.end" : 70,
          "key.parsed_scope.start" : 70,
          "key.typename" : "Dictionary<Key, Value>.Type",
          "key.typeusr" : "$sSDyxq_GmD",
          "key.usr" : "s:SD"
        },
        {
          "key.annotated_decl" : "<Declaration>@frozen struct Array&lt;Element&gt; : <Type usr=\"s:s24_DestructorSafeContainerP\">_DestructorSafeContainer<\/Type><\/Declaration>",
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "An ordered, random-access collection."
            },
            "key.bb.doc_source" : "inherited"
          },
          "key.bb.inherited_types" : [
            {
              "key.bb.type_name" : "P1"
            }
          ],
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "extension Array: P1 where Element: Comparable",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "extension "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "Array"
            }
          ],
          "key.bb.type_module_name" : "Swift",
          "key.bodylength" : 23,
          "key.bodyoffset" : 1449,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.declaration" : "@frozen struct Array<Element> : _DestructorSafeContainer",
          "key.doc.discussion" : [
            {
              "Para" : "Arrays are one of the most commonly used data types in an app. You use arrays to organize your app’s data. Specifically, you use the `Array` type to hold elements of a single type, the array’s `Element` type. An array can store any kind of elements—from integers to strings to classes."
            },
            {
              "Para" : "Swift makes it easy to create arrays in your code using an array literal: simply surround a comma-separated list of values with square brackets. Without any other information, Swift creates an array that includes the specified values, automatically inferring the array’s `Element` type. For example:"
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "You can create an empty array by specifying the `Element` type of your array in the declaration. For example:"
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "If you need an array that is preinitialized with a fixed number of default values, use the `Array(repeating:count:)` initializer."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "When you need to perform an operation on all of an array’s elements, use a `for`-`in` loop to iterate through the array’s contents."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "Use the `isEmpty` property to check quickly whether an array has any elements, or use the `count` property to find the number of elements in the array."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "Use the `first` and `last` properties for safe access to the value of the array’s first and last elements. If the array is empty, these properties are `nil`."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "You can access individual array elements through a subscript. The first element of a nonempty array is always at index zero. You can subscript an array with any integer from zero up to, but not including, the count of the array. Using a negative number or an index equal to or greater than `count` triggers a runtime error. For example:"
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "Suppose you need to store a list of the names of students that are signed up for a class you’re teaching. During the registration period, you need to add and remove names as students add and drop the class."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "To add single elements to the end of an array, use the `append(_:)` method. Add multiple elements at the same time by passing another array or a sequence of any kind to the `append(contentsOf:)` method."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "You can add new elements in the middle of an array by using the `insert(_:at:)` method for single elements and by using `insert(contentsOf:at:)` to insert multiple elements from another collection or array literal. The elements at that index and later indices are shifted back to make room."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "To remove elements from an array, use the `remove(at:)`, `removeSubrange(_:)`, and `removeLast()` methods."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "You can replace an existing element with a new value by assigning the new value to the subscript."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "Every array reserves a specific amount of memory to hold its contents. When you add elements to an array and that array begins to exceed its reserved capacity, the array allocates a larger region of memory and copies its elements into the new storage. The new storage is a multiple of the old storage’s size. This exponential growth strategy means that appending an element happens in constant time, averaging the performance of many append operations. Append operations that trigger reallocation have a performance cost, but they occur less and less often as the array grows larger."
            },
            {
              "Para" : "If you know approximately how many elements you will need to store, use the `reserveCapacity(_:)` method before appending to the array to avoid intermediate reallocations. Use the `capacity` and `count` properties to determine how many more elements the array can store without allocating larger storage."
            },
            {
              "Para" : "For arrays of most `Element` types, this storage is a contiguous block of memory. For arrays with an `Element` type that is a class or `@objc` protocol type, this storage can be a contiguous block of memory or an instance of `NSArray`. Because any arbitrary subclass of `NSArray` can become an `Array`, there are no guarantees about representation or efficiency in this case."
            },
            {
              "Para" : "Each array has an independent value that includes the values of all of its elements. For simple types such as integers and other structures, this means that when you change a value in one array, the value of that element does not change in any copies of the array. For example:"
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "If the elements in an array are instances of a class, the semantics are the same, though they might appear different at first. In this case, the values stored in the array are references to objects that live outside the array. If you change a reference to an object in one array, only that array has a reference to the new object. However, if two arrays contain references to the same object, you can observe changes to that object’s properties from both arrays. For example:"
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "Arrays, like all variable-size collections in the standard library, use copy-on-write optimization. Multiple copies of an array share the same storage until you modify one of the copies. When that happens, the array being modified replaces its storage with a uniquely owned copy of itself, which is then modified in place. Optimizations are sometimes applied that can reduce the amount of copying."
            },
            {
              "Para" : "This means that if an array is sharing storage with other copies, the first mutating operation on that array incurs the cost of copying the array. An array that is the sole owner of its storage can perform mutating operations in place."
            },
            {
              "Para" : "In the example below, a `numbers` array is created along with two copies that share the same storage. When the original `numbers` array is modified, it makes a unique copy of its storage before making the modification. Further modifications to `numbers` are made in place, while the two copies continue to share the original storage."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "When you need to access APIs that require data in an `NSArray` instance instead of `Array`, use the type-cast operator (`as`) to bridge your instance. For bridging to be possible, the `Element` type of your array must be a class, an `@objc` protocol (a protocol imported from Objective-C or marked with the `@objc` attribute), or a type that bridges to a Foundation type."
            },
            {
              "Para" : "The following example shows how you can bridge an `Array` instance to `NSArray` to use the `write(to:atomically:)` method. In this example, the `colors` array can be bridged to `NSArray` because the `colors` array’s `String` elements bridge to `NSString`. The compiler prevents bridging the `moreColors` array, on the other hand, because its `Element` type is `Optional<String>`, which does  bridge to a Foundation type."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "Bridging from `Array` to `NSArray` takes O(1) time and O(1) space if the array’s elements are already instances of a class or an `@objc` protocol; otherwise, it takes O() time and space."
            },
            {
              "Para" : "When the destination array’s element type is a class or an `@objc` protocol, bridging from `NSArray` to `Array` first calls the `copy(with:)` (`- copyWithZone:` in Objective-C) method on the array to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time. For instances of `NSArray` that are already immutable, `copy(with:)` usually returns the same array in O(1) time; otherwise, the copying performance is unspecified. If `copy(with:)` returns the same array, the instances of `NSArray` and `Array` share storage using the same copy-on-write optimization that is used when two instances of `Array` share storage."
            },
            {
              "Para" : "When the destination array’s element type is a nonclass type that bridges to a Foundation type, bridging from `NSArray` to `Array` performs a bridging copy of the elements to contiguous storage in O() time. For example, bridging from `NSArray` to `Array<Int>` performs such a copy. No further bridging is required when accessing elements of the `Array` instance."
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Class><Name>Array<\/Name><USR>s:Sa<\/USR><Declaration>@frozen struct Array&lt;Element&gt; : _DestructorSafeContainer<\/Declaration><CommentParts><Abstract><Para>An ordered, random-access collection.<\/Para><\/Abstract><Discussion><Para>Arrays are one of the most commonly used data types in an app. You use arrays to organize your app’s data. Specifically, you use the <codeVoice>Array<\/codeVoice> type to hold elements of a single type, the array’s <codeVoice>Element<\/codeVoice> type. An array can store any kind of elements—from integers to strings to classes.<\/Para><Para>Swift makes it easy to create arrays in your code using an array literal: simply surround a comma-separated list of values with square brackets. Without any other information, Swift creates an array that includes the specified values, automatically inferring the array’s <codeVoice>Element<\/codeVoice> type. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[\/\/ An array of 'Int' elements]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let oddNumbers = [1, 3, 5, 7, 9, 11, 13, 15]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ An array of 'String' elements]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let streets = [\"Albemarle\", \"Brandywine\", \"Chesapeake\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can create an empty array by specifying the <codeVoice>Element<\/codeVoice> type of your array in the declaration. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[\/\/ Shortened forms are preferred]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var emptyDoubles: [Double] = []]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ The full type name is also allowed]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var emptyFloats: Array<Float> = Array()]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>If you need an array that is preinitialized with a fixed number of default values, use the <codeVoice>Array(repeating:count:)<\/codeVoice> initializer.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var digitCounts = Array(repeating: 0, count: 10)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(digitCounts)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Array Values<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>When you need to perform an operation on all of an array’s elements, use a <codeVoice>for<\/codeVoice>-<codeVoice>in<\/codeVoice> loop to iterate through the array’s contents.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[for street in streets {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"I don't live on \\(street).\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"I don't live on Albemarle.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"I don't live on Brandywine.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"I don't live on Chesapeake.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Use the <codeVoice>isEmpty<\/codeVoice> property to check quickly whether an array has any elements, or use the <codeVoice>count<\/codeVoice> property to find the number of elements in the array.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if oddNumbers.isEmpty {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"I don't know any odd numbers.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[} else {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"I know \\(oddNumbers.count) odd numbers.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"I know 8 odd numbers.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Use the <codeVoice>first<\/codeVoice> and <codeVoice>last<\/codeVoice> properties for safe access to the value of the array’s first and last elements. If the array is empty, these properties are <codeVoice>nil<\/codeVoice>.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstElement = oddNumbers.first, let lastElement = oddNumbers.last {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(firstElement, lastElement, separator: \", \")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1, 15\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(emptyDoubles.first, emptyDoubles.last, separator: \", \")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"nil, nil\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can access individual array elements through a subscript. The first element of a nonempty array is always at index zero. You can subscript an array with any integer from zero up to, but not including, the count of the array. Using a negative number or an index equal to or greater than <codeVoice>count<\/codeVoice> triggers a runtime error. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(oddNumbers[0], oddNumbers[3], separator: \", \")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1, 7\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(emptyDoubles[0])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Triggers runtime error: Index out of range]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Adding and Removing Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Suppose you need to store a list of the names of students that are signed up for a class you’re teaching. During the registration period, you need to add and remove names as students add and drop the class.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var students = [\"Ben\", \"Ivy\", \"Jordell\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>To add single elements to the end of an array, use the <codeVoice>append(_:)<\/codeVoice> method. Add multiple elements at the same time by passing another array or a sequence of any kind to the <codeVoice>append(contentsOf:)<\/codeVoice> method.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[students.append(\"Maxime\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[students.append(contentsOf: [\"Shakia\", \"William\"])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ [\"Ben\", \"Ivy\", \"Jordell\", \"Maxime\", \"Shakia\", \"William\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can add new elements in the middle of an array by using the <codeVoice>insert(_:at:)<\/codeVoice> method for single elements and by using <codeVoice>insert(contentsOf:at:)<\/codeVoice> to insert multiple elements from another collection or array literal. The elements at that index and later indices are shifted back to make room.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[students.insert(\"Liam\", at: 3)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ [\"Ben\", \"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\", \"William\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>To remove elements from an array, use the <codeVoice>remove(at:)<\/codeVoice>, <codeVoice>removeSubrange(_:)<\/codeVoice>, and <codeVoice>removeLast()<\/codeVoice> methods.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[\/\/ Ben's family is moving to another state]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[students.remove(at: 0)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ [\"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\", \"William\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ William is signing up for a different class]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[students.removeLast()]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ [\"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can replace an existing element with a new value by assigning the new value to the subscript.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let i = students.firstIndex(of: \"Maxime\") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    students[i] = \"Max\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ [\"Ivy\", \"Jordell\", \"Liam\", \"Max\", \"Shakia\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Growing the Size of an Array<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>Every array reserves a specific amount of memory to hold its contents. When you add elements to an array and that array begins to exceed its reserved capacity, the array allocates a larger region of memory and copies its elements into the new storage. The new storage is a multiple of the old storage’s size. This exponential growth strategy means that appending an element happens in constant time, averaging the performance of many append operations. Append operations that trigger reallocation have a performance cost, but they occur less and less often as the array grows larger.<\/Para><Para>If you know approximately how many elements you will need to store, use the <codeVoice>reserveCapacity(_:)<\/codeVoice> method before appending to the array to avoid intermediate reallocations. Use the <codeVoice>capacity<\/codeVoice> and <codeVoice>count<\/codeVoice> properties to determine how many more elements the array can store without allocating larger storage.<\/Para><Para>For arrays of most <codeVoice>Element<\/codeVoice> types, this storage is a contiguous block of memory. For arrays with an <codeVoice>Element<\/codeVoice> type that is a class or <codeVoice>@objc<\/codeVoice> protocol type, this storage can be a contiguous block of memory or an instance of <codeVoice>NSArray<\/codeVoice>. Because any arbitrary subclass of <codeVoice>NSArray<\/codeVoice> can become an <codeVoice>Array<\/codeVoice>, there are no guarantees about representation or efficiency in this case.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Modifying Copies of Arrays<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Each array has an independent value that includes the values of all of its elements. For simple types such as integers and other structures, this means that when you change a value in one array, the value of that element does not change in any copies of the array. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var numbers = [1, 2, 3, 4, 5]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var numbersCopy = numbers]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[numbers[0] = 100]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(numbers)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[100, 2, 3, 4, 5]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(numbersCopy)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[1, 2, 3, 4, 5]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>If the elements in an array are instances of a class, the semantics are the same, though they might appear different at first. In this case, the values stored in the array are references to objects that live outside the array. If you change a reference to an object in one array, only that array has a reference to the new object. However, if two arrays contain references to the same object, you can observe changes to that object’s properties from both arrays. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[\/\/ An integer type with reference semantics]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[class IntegerReference {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    var value = 10]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var firstIntegers = [IntegerReference(), IntegerReference()]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var secondIntegers = firstIntegers]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Modifications to an instance are visible from either array]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[firstIntegers[0].value = 100]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondIntegers[0].value)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"100\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Replacements, additions, and removals are still visible]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ only in the modified array]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[firstIntegers[0] = IntegerReference()]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstIntegers[0].value)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"10\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondIntegers[0].value)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"100\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Arrays, like all variable-size collections in the standard library, use copy-on-write optimization. Multiple copies of an array share the same storage until you modify one of the copies. When that happens, the array being modified replaces its storage with a uniquely owned copy of itself, which is then modified in place. Optimizations are sometimes applied that can reduce the amount of copying.<\/Para><Para>This means that if an array is sharing storage with other copies, the first mutating operation on that array incurs the cost of copying the array. An array that is the sole owner of its storage can perform mutating operations in place.<\/Para><Para>In the example below, a <codeVoice>numbers<\/codeVoice> array is created along with two copies that share the same storage. When the original <codeVoice>numbers<\/codeVoice> array is modified, it makes a unique copy of its storage before making the modification. Further modifications to <codeVoice>numbers<\/codeVoice> are made in place, while the two copies continue to share the original storage.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var numbers = [1, 2, 3, 4, 5]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var firstCopy = numbers]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var secondCopy = numbers]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ The storage for 'numbers' is copied here]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[numbers[0] = 100]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[numbers[1] = 200]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[numbers[2] = 300]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ 'numbers' is [100, 200, 300, 4, 5]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ 'firstCopy' and 'secondCopy' are [1, 2, 3, 4, 5]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Bridging Between Array and NSArray<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>When you need to access APIs that require data in an <codeVoice>NSArray<\/codeVoice> instance instead of <codeVoice>Array<\/codeVoice>, use the type-cast operator (<codeVoice>as<\/codeVoice>) to bridge your instance. For bridging to be possible, the <codeVoice>Element<\/codeVoice> type of your array must be a class, an <codeVoice>@objc<\/codeVoice> protocol (a protocol imported from Objective-C or marked with the <codeVoice>@objc<\/codeVoice> attribute), or a type that bridges to a Foundation type.<\/Para><Para>The following example shows how you can bridge an <codeVoice>Array<\/codeVoice> instance to <codeVoice>NSArray<\/codeVoice> to use the <codeVoice>write(to:atomically:)<\/codeVoice> method. In this example, the <codeVoice>colors<\/codeVoice> array can be bridged to <codeVoice>NSArray<\/codeVoice> because the <codeVoice>colors<\/codeVoice> array’s <codeVoice>String<\/codeVoice> elements bridge to <codeVoice>NSString<\/codeVoice>. The compiler prevents bridging the <codeVoice>moreColors<\/codeVoice> array, on the other hand, because its <codeVoice>Element<\/codeVoice> type is <codeVoice>Optional&lt;String&gt;<\/codeVoice>, which does <emphasis>not<\/emphasis> bridge to a Foundation type.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let colors = [\"periwinkle\", \"rose\", \"moss\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let moreColors: [String?] = [\"ochre\", \"pine\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let url = URL(fileURLWithPath: \"names.plist\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[(colors as NSArray).write(to: url, atomically: true)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ true]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[(moreColors as NSArray).write(to: url, atomically: true)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ error: cannot convert value of type '[String?]' to type 'NSArray']]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Bridging from <codeVoice>Array<\/codeVoice> to <codeVoice>NSArray<\/codeVoice> takes O(1) time and O(1) space if the array’s elements are already instances of a class or an <codeVoice>@objc<\/codeVoice> protocol; otherwise, it takes O(<emphasis>n<\/emphasis>) time and space.<\/Para><Para>When the destination array’s element type is a class or an <codeVoice>@objc<\/codeVoice> protocol, bridging from <codeVoice>NSArray<\/codeVoice> to <codeVoice>Array<\/codeVoice> first calls the <codeVoice>copy(with:)<\/codeVoice> (<codeVoice>- copyWithZone:<\/codeVoice> in Objective-C) method on the array to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time. For instances of <codeVoice>NSArray<\/codeVoice> that are already immutable, <codeVoice>copy(with:)<\/codeVoice> usually returns the same array in O(1) time; otherwise, the copying performance is unspecified. If <codeVoice>copy(with:)<\/codeVoice> returns the same array, the instances of <codeVoice>NSArray<\/codeVoice> and <codeVoice>Array<\/codeVoice> share storage using the same copy-on-write optimization that is used when two instances of <codeVoice>Array<\/codeVoice> share storage.<\/Para><Para>When the destination array’s element type is a nonclass type that bridges to a Foundation type, bridging from <codeVoice>NSArray<\/codeVoice> to <codeVoice>Array<\/codeVoice> performs a bridging copy of the elements to contiguous storage in O(<emphasis>n<\/emphasis>) time. For example, bridging from <codeVoice>NSArray<\/codeVoice> to <codeVoice>Array&lt;Int&gt;<\/codeVoice> performs such a copy. No further bridging is required when accessing elements of the <codeVoice>Array<\/codeVoice> instance.<\/Para><Note><Para>The <codeVoice>ContiguousArray<\/codeVoice> and <codeVoice>ArraySlice<\/codeVoice> types are not bridged; instances of those types always have a contiguous block of memory as their storage.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Class>",
          "key.doc.name" : "Array",
          "key.doc.type" : "Class",
          "key.elements" : [
            {
              "key.kind" : "source.lang.swift.structure.elem.typeref",
              "key.length" : 2,
              "key.offset" : 1419
            }
          ],
          "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Array<\/decl.name>&lt;<decl.generic_type_param usr=\"s:Sa7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s24_DestructorSafeContainerP\">_DestructorSafeContainer<\/ref.protocol><\/decl.struct>",
          "key.groupname" : "Collection\/Array",
          "key.inheritedtypes" : [
            {
              "key.name" : "P1"
            }
          ],
          "key.is_system" : true,
          "key.kind" : "source.lang.swift.decl.extension",
          "key.length" : 71,
          "key.modulename" : "Swift",
          "key.name" : "Array",
          "key.namelength" : 5,
          "key.nameoffset" : 1412,
          "key.offset" : 1402,
          "key.parsed_declaration" : "extension Array: P1 where Element: Comparable",
          "key.parsed_scope.end" : 74,
          "key.parsed_scope.start" : 72,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>func arrayFunc()<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "func arrayFunc()",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "arrayFunc"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "()"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 1470,
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/Protocols.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>arrayFunc<\/decl.name>()<\/decl.function.method.instance>",
              "key.groupname" : "Collection\/Array",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 19,
              "key.line" : 73,
              "key.name" : "arrayFunc()",
              "key.namelength" : 11,
              "key.nameoffset" : 1457,
              "key.offset" : 1452,
              "key.parsed_declaration" : "func arrayFunc()",
              "key.parsed_scope.end" : 73,
              "key.parsed_scope.start" : 73,
              "key.typename" : "<Element where Element : Comparable> (Array<Element>) -> () -> ()",
              "key.typeusr" : "$syycD",
              "key.usr" : "s:Sa14SpmSwiftModuleSLRzlE9arrayFuncyyF"
            }
          ],
          "key.typename" : "Array<Element>.Type",
          "key.typeusr" : "$sSayxGmD",
          "key.usr" : "s:Sa"
        }
      ]
    }
  },
  {
    "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift" : {
      "key.bb.module_name" : "SpmSwiftModule",
      "key.bb.pass_index" : 0,
      "key.bb.version" : "1.0",
      "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
      "key.length" : 2986,
      "key.offset" : 0,
      "key.substructure" : [
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public struct SpmSwiftModule<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.length" : 6,
              "key.offset" : 19
            }
          ],
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "Main structure"
            },
            "key.bb.doc_source" : "docComment"
          },
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "public struct SpmSwiftModule",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "struct "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "SpmSwiftModule"
            }
          ],
          "key.bodylength" : 616,
          "key.bodyoffset" : 49,
          "key.column" : 15,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.column" : 15,
          "key.doc.comment" : "Main structure",
          "key.doc.declaration" : "public struct SpmSwiftModule",
          "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.doc.full_as_xml" : "<Class file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"2\" column=\"15\"><Name>SpmSwiftModule<\/Name><USR>s:14SpmSwiftModuleAAV<\/USR><Declaration>public struct SpmSwiftModule<\/Declaration><CommentParts><Abstract><Para>Main structure<\/Para><\/Abstract><\/CommentParts><\/Class>",
          "key.doc.line" : 2,
          "key.doc.name" : "SpmSwiftModule",
          "key.doc.type" : "Class",
          "key.doclength" : 19,
          "key.docoffset" : 0,
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>SpmSwiftModule<\/decl.name><\/decl.struct>",
          "key.kind" : "source.lang.swift.decl.struct",
          "key.length" : 640,
          "key.line" : 2,
          "key.name" : "SpmSwiftModule",
          "key.namelength" : 14,
          "key.nameoffset" : 33,
          "key.offset" : 26,
          "key.parsed_declaration" : "public struct SpmSwiftModule",
          "key.parsed_scope.end" : 32,
          "key.parsed_scope.start" : 2,
          "key.substructure" : [
            {
              "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
              "key.length" : 12,
              "key.name" : "MARK: Fields",
              "key.namelength" : 0,
              "key.nameoffset" : 0,
              "key.offset" : 57
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public var text: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.length" : 6,
                  "key.offset" : 74
                }
              ],
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "public var text: String",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "var "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "text"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": String"
                }
              ],
              "key.column" : 16,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>text<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 26,
              "key.line" : 4,
              "key.name" : "text",
              "key.namelength" : 4,
              "key.nameoffset" : 85,
              "key.offset" : 81,
              "key.parsed_declaration" : "public var text = \"Hello, World!\"",
              "key.parsed_scope.end" : 4,
              "key.parsed_scope.start" : 4,
              "key.setter_accessibility" : "source.lang.swift.accessibility.public",
              "key.typename" : "String",
              "key.typeusr" : "$sSSD",
              "key.usr" : "s:14SpmSwiftModuleAAV4textSSvp"
            },
            {
              "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
              "key.length" : 29,
              "key.name" : "MARK: _Nested_ strúctures ``",
              "key.namelength" : 0,
              "key.nameoffset" : 0,
              "key.offset" : 116
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public struct <Type usr=\"s:14SpmSwiftModuleAAV\">SpmSwiftModule<\/Type>.Nested1<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.length" : 6,
                  "key.offset" : 151
                }
              ],
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "public struct Nested1",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "struct "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "Nested1"
                }
              ],
              "key.bodylength" : 116,
              "key.bodyoffset" : 174,
              "key.column" : 19,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <ref.struct usr=\"s:14SpmSwiftModuleAAV\">SpmSwiftModule<\/ref.struct>.<decl.name>Nested1<\/decl.name><\/decl.struct>",
              "key.kind" : "source.lang.swift.decl.struct",
              "key.length" : 133,
              "key.line" : 8,
              "key.name" : "Nested1",
              "key.namelength" : 7,
              "key.nameoffset" : 165,
              "key.offset" : 158,
              "key.parsed_declaration" : "public struct Nested1",
              "key.parsed_scope.end" : 14,
              "key.parsed_scope.start" : 8,
              "key.substructure" : [
                {
                  "key.accessibility" : "source.lang.swift.accessibility.public",
                  "key.annotated_decl" : "<Declaration>public struct <Type usr=\"s:14SpmSwiftModuleAAV\">SpmSwiftModule<\/Type>.<Type usr=\"s:14SpmSwiftModuleAAV7Nested1V\">Nested1<\/Type>.Nested2a<\/Declaration>",
                  "key.attributes" : [
                    {
                      "key.attribute" : "source.decl.attribute.public",
                      "key.length" : 6,
                      "key.offset" : 182
                    }
                  ],
                  "key.bb.is_override" : false,
                  "key.bb.is_spi" : false,
                  "key.bb.swift_declaration" : "public struct Nested2a",
                  "key.bb.swift_deprecated_everywhere" : false,
                  "key.bb.swift_name_pieces" : [
                    {
                      "key.bb.name_piece_is_name" : false,
                      "key.bb.name_piece_text" : "struct "
                    },
                    {
                      "key.bb.name_piece_is_name" : true,
                      "key.bb.name_piece_text" : "Nested2a"
                    }
                  ],
                  "key.bodylength" : 7,
                  "key.bodyoffset" : 206,
                  "key.column" : 21,
                  "key.decl_lang" : "source.lang.swift",
                  "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
                  "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <ref.struct usr=\"s:14SpmSwiftModuleAAV\">SpmSwiftModule<\/ref.struct>.<ref.struct usr=\"s:14SpmSwiftModuleAAV7Nested1V\">Nested1<\/ref.struct>.<decl.name>Nested2a<\/decl.name><\/decl.struct>",
                  "key.kind" : "source.lang.swift.decl.struct",
                  "key.length" : 25,
                  "key.line" : 9,
                  "key.name" : "Nested2a",
                  "key.namelength" : 8,
                  "key.nameoffset" : 196,
                  "key.offset" : 189,
                  "key.parsed_declaration" : "public struct Nested2a",
                  "key.parsed_scope.end" : 10,
                  "key.parsed_scope.start" : 9,
                  "key.typename" : "SpmSwiftModule.Nested1.Nested2a.Type",
                  "key.typeusr" : "$s14SpmSwiftModuleAAV7Nested1V8Nested2aVmD",
                  "key.usr" : "s:14SpmSwiftModuleAAV7Nested1V8Nested2aV"
                },
                {
                  "key.accessibility" : "source.lang.swift.accessibility.public",
                  "key.annotated_decl" : "<Declaration>public struct <Type usr=\"s:14SpmSwiftModuleAAV\">SpmSwiftModule<\/Type>.<Type usr=\"s:14SpmSwiftModuleAAV7Nested1V\">Nested1<\/Type>.Nested2b<\/Declaration>",
                  "key.attributes" : [
                    {
                      "key.attribute" : "source.decl.attribute.public",
                      "key.length" : 6,
                      "key.offset" : 253
                    },
                    {
                      "key.attribute" : "source.decl.attribute.available",
                      "key.length" : 25,
                      "key.offset" : 221
                    }
                  ],
                  "key.bb.is_override" : false,
                  "key.bb.is_spi" : false,
                  "key.bb.swift_declaration" : "public struct Nested2b",
                  "key.bb.swift_deprecated_everywhere" : true,
                  "key.bb.swift_deprecation_messages" : {
                    "en" : "Deprecated."
                  },
                  "key.bb.swift_name_pieces" : [
                    {
                      "key.bb.name_piece_is_name" : false,
                      "key.bb.name_piece_text" : "struct "
                    },
                    {
                      "key.bb.name_piece_is_name" : true,
                      "key.bb.name_piece_text" : "Nested2b"
                    }
                  ],
                  "key.bodylength" : 7,
                  "key.bodyoffset" : 277,
                  "key.column" : 21,
                  "key.decl_lang" : "source.lang.swift",
                  "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
                  "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <ref.struct usr=\"s:14SpmSwiftModuleAAV\">SpmSwiftModule<\/ref.struct>.<ref.struct usr=\"s:14SpmSwiftModuleAAV7Nested1V\">Nested1<\/ref.struct>.<decl.name>Nested2b<\/decl.name><\/decl.struct>",
                  "key.kind" : "source.lang.swift.decl.struct",
                  "key.length" : 25,
                  "key.line" : 12,
                  "key.name" : "Nested2b",
                  "key.namelength" : 8,
                  "key.nameoffset" : 267,
                  "key.offset" : 260,
                  "key.parsed_declaration" : "public struct Nested2b",
                  "key.parsed_scope.end" : 13,
                  "key.parsed_scope.start" : 12,
                  "key.typename" : "SpmSwiftModule.Nested1.Nested2b.Type",
                  "key.typeusr" : "$s14SpmSwiftModuleAAV7Nested1V8Nested2bVmD",
                  "key.usr" : "s:14SpmSwiftModuleAAV7Nested1V8Nested2bV"
                }
              ],
              "key.typename" : "SpmSwiftModule.Nested1.Type",
              "key.typeusr" : "$s14SpmSwiftModuleAAV7Nested1VmD",
              "key.usr" : "s:14SpmSwiftModuleAAV7Nested1V"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public struct <Type usr=\"s:14SpmSwiftModuleAAV\">SpmSwiftModule<\/Type>.Nested2<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.length" : 6,
                  "key.offset" : 297
                }
              ],
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "public struct Nested2",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "struct "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "Nested2"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 320,
              "key.column" : 19,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <ref.struct usr=\"s:14SpmSwiftModuleAAV\">SpmSwiftModule<\/ref.struct>.<decl.name>Nested2<\/decl.name><\/decl.struct>",
              "key.kind" : "source.lang.swift.decl.struct",
              "key.length" : 17,
              "key.line" : 16,
              "key.name" : "Nested2",
              "key.namelength" : 7,
              "key.nameoffset" : 311,
              "key.offset" : 304,
              "key.parsed_declaration" : "public struct Nested2",
              "key.parsed_scope.end" : 16,
              "key.parsed_scope.start" : 16,
              "key.typename" : "SpmSwiftModule.Nested2.Type",
              "key.typeusr" : "$s14SpmSwiftModuleAAV7Nested2VmD",
              "key.usr" : "s:14SpmSwiftModuleAAV7Nested2V"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>var a: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
              "key.bb.documentation" : {
                "key.bb.abstract" : {
                  "en" : "A pair of Ints"
                },
                "key.bb.doc_source" : "docComment"
              },
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "var a: Int",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "var "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "a"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": Int"
                }
              ],
              "key.column" : 9,
              "key.decl_lang" : "source.lang.swift",
              "key.doc.column" : 9,
              "key.doc.comment" : "A pair of Ints",
              "key.doc.declaration" : "var a: Int",
              "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.doc.full_as_xml" : "<Other file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"19\" column=\"9\"><Name>a<\/Name><USR>s:14SpmSwiftModuleAAV1aSivp<\/USR><Declaration>var a: Int<\/Declaration><CommentParts><Abstract><Para>A pair of Ints<\/Para><\/Abstract><\/CommentParts><\/Other>",
              "key.doc.line" : 19,
              "key.doc.name" : "a",
              "key.doc.type" : "Other",
              "key.doclength" : 19,
              "key.docoffset" : 327,
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>a<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 26,
              "key.line" : 19,
              "key.name" : "a",
              "key.namelength" : 1,
              "key.nameoffset" : 354,
              "key.offset" : 350,
              "key.parsed_declaration" : "var a: Int,\n    b: Int",
              "key.parsed_scope.end" : 19,
              "key.parsed_scope.start" : 19,
              "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
              "key.typename" : "Int",
              "key.typeusr" : "$sSiD",
              "key.usr" : "s:14SpmSwiftModuleAAV1aSivp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>var b: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
              "key.bb.documentation" : {
                "key.bb.abstract" : {
                  "en" : "A pair of Ints"
                },
                "key.bb.doc_source" : "docComment"
              },
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "var b: Int",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "var "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "b"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": Int"
                }
              ],
              "key.column" : 9,
              "key.decl_lang" : "source.lang.swift",
              "key.doc.column" : 9,
              "key.doc.declaration" : "var b: Int",
              "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.doc.full_as_xml" : "<Other file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"20\" column=\"9\"><Name>b<\/Name><USR>s:14SpmSwiftModuleAAV1bSivp<\/USR><Declaration>var b: Int<\/Declaration><CommentParts><Abstract><Para>A pair of Ints<\/Para><\/Abstract><\/CommentParts><\/Other>",
              "key.doc.line" : 20,
              "key.doc.name" : "b",
              "key.doc.type" : "Other",
              "key.doclength" : 19,
              "key.docoffset" : 327,
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>b<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 26,
              "key.line" : 20,
              "key.name" : "b",
              "key.namelength" : 1,
              "key.nameoffset" : 370,
              "key.offset" : 350,
              "key.parsed_declaration" : "var a: Int,\n    b: Int",
              "key.parsed_scope.end" : 19,
              "key.parsed_scope.start" : 19,
              "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
              "key.typename" : "Int",
              "key.typeusr" : "$sSiD",
              "key.usr" : "s:14SpmSwiftModuleAAV1bSivp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public func checkState(name: <Type usr=\"s:SS\">String<\/Type>) throws -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.length" : 6,
                  "key.offset" : 596
                }
              ],
              "key.bb.documentation" : {
                "key.bb.abstract" : {
                  "en" : "A method with params, throws, returns."
                },
                "key.bb.discussion" : {
                  "en" : "Does some checking."
                },
                "key.bb.doc_source" : "docComment",
                "key.bb.parameters" : [
                  {
                    "key.bb.param_desc" : {
                      "en" : "The name"
                    },
                    "key.bb.param_name" : "name"
                  }
                ],
                "key.bb.returns" : {
                  "en" : "A value"
                },
                "key.bb.throws" : {
                  "en" : "An error from `AnEnum` if things are wrong"
                }
              },
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "public func checkState(name: String) throws -> Int",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "checkState"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "("
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "name"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": String) -> Int"
                }
              ],
              "key.bodylength" : 15,
              "key.bodyoffset" : 648,
              "key.column" : 17,
              "key.decl_lang" : "source.lang.swift",
              "key.doc.column" : 17,
              "key.doc.comment" : "A method with params, throws, returns.\n\nDoes some checking.\n\n- parameter name: The name\n- returns: A value\n- throws: An error from `AnEnum` if things are wrong",
              "key.doc.declaration" : "public func checkState(name: String) throws -> Int",
              "key.doc.discussion" : [
                {
                  "Para" : "Does some checking."
                }
              ],
              "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.doc.full_as_xml" : "<Function file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"29\" column=\"17\"><Name>checkState(name:)<\/Name><USR>s:14SpmSwiftModuleAAV10checkState4nameSiSS_tKF<\/USR><Declaration>public func checkState(name: String) throws -&gt; Int<\/Declaration><CommentParts><Abstract><Para>A method with params, throws, returns.<\/Para><\/Abstract><Parameters><Parameter><Name>name<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The name<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>A value<\/Para><\/ResultDiscussion><ThrowsDiscussion><Para>An error from <codeVoice>AnEnum<\/codeVoice> if things are wrong<\/Para><\/ThrowsDiscussion><Discussion><Para>Does some checking.<\/Para><\/Discussion><\/CommentParts><\/Function>",
              "key.doc.line" : 29,
              "key.doc.name" : "checkState(name:)",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The name"
                    }
                  ],
                  "name" : "name"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "Para" : "A value"
                }
              ],
              "key.doc.type" : "Function",
              "key.doclength" : 210,
              "key.docoffset" : 382,
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>checkState<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>name<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 61,
              "key.line" : 29,
              "key.name" : "checkState(name:)",
              "key.namelength" : 24,
              "key.nameoffset" : 608,
              "key.offset" : 603,
              "key.parsed_declaration" : "public func checkState(name: String) throws -> Int",
              "key.parsed_scope.end" : 31,
              "key.parsed_scope.start" : 29,
              "key.typename" : "(SpmSwiftModule) -> (String) throws -> Int",
              "key.typeusr" : "$s4nameSiSS_tKcD",
              "key.usr" : "s:14SpmSwiftModuleAAV10checkState4nameSiSS_tKF"
            }
          ],
          "key.typename" : "SpmSwiftModule.Type",
          "key.typeusr" : "$s14SpmSwiftModuleAAVmD",
          "key.usr" : "s:14SpmSwiftModuleAAV"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public enum AnEnum<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.length" : 6,
              "key.offset" : 680
            }
          ],
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "An enum"
            },
            "key.bb.doc_source" : "docComment"
          },
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "public enum AnEnum",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "enum "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "AnEnum"
            }
          ],
          "key.bodylength" : 193,
          "key.bodyoffset" : 700,
          "key.column" : 13,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.column" : 13,
          "key.doc.comment" : "An enum",
          "key.doc.declaration" : "public enum AnEnum",
          "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.doc.full_as_xml" : "<Other file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"35\" column=\"13\"><Name>AnEnum<\/Name><USR>s:14SpmSwiftModule6AnEnumO<\/USR><Declaration>public enum AnEnum<\/Declaration><CommentParts><Abstract><Para>An enum<\/Para><\/Abstract><\/CommentParts><\/Other>",
          "key.doc.line" : 35,
          "key.doc.name" : "AnEnum",
          "key.doc.type" : "Other",
          "key.doclength" : 12,
          "key.docoffset" : 668,
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>AnEnum<\/decl.name><\/decl.enum>",
          "key.kind" : "source.lang.swift.decl.enum",
          "key.length" : 207,
          "key.line" : 35,
          "key.name" : "AnEnum",
          "key.namelength" : 6,
          "key.nameoffset" : 692,
          "key.offset" : 687,
          "key.parsed_declaration" : "public enum AnEnum",
          "key.parsed_scope.end" : 44,
          "key.parsed_scope.start" : 35,
          "key.substructure" : [
            {
              "key.kind" : "source.lang.swift.decl.enumcase",
              "key.length" : 15,
              "key.namelength" : 0,
              "key.nameoffset" : 0,
              "key.offset" : 724,
              "key.substructure" : [
                {
                  "key.accessibility" : "source.lang.swift.accessibility.public",
                  "key.annotated_decl" : "<Declaration>case first(<Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                  "key.bb.documentation" : {
                    "key.bb.abstract" : {
                      "en" : "First case"
                    },
                    "key.bb.doc_source" : "docComment"
                  },
                  "key.bb.is_override" : false,
                  "key.bb.is_spi" : false,
                  "key.bb.swift_declaration" : "case first(Int)",
                  "key.bb.swift_deprecated_everywhere" : false,
                  "key.bb.swift_name_pieces" : [
                    {
                      "key.bb.name_piece_is_name" : false,
                      "key.bb.name_piece_text" : "case "
                    },
                    {
                      "key.bb.name_piece_is_name" : true,
                      "key.bb.name_piece_text" : "first"
                    },
                    {
                      "key.bb.name_piece_is_name" : false,
                      "key.bb.name_piece_text" : "(Int)"
                    }
                  ],
                  "key.column" : 10,
                  "key.decl_lang" : "source.lang.swift",
                  "key.doc.column" : 10,
                  "key.doc.comment" : "First case",
                  "key.doc.declaration" : "",
                  "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
                  "key.doc.full_as_xml" : "<Other file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"37\" column=\"10\"><Name>first(_:)<\/Name><USR>s:14SpmSwiftModule6AnEnumO5firstyACSicACmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>First case<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line" : 37,
                  "key.doc.name" : "first(_:)",
                  "key.doc.type" : "Other",
                  "key.doclength" : 15,
                  "key.docoffset" : 705,
                  "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
                  "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>first<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                  "key.kind" : "source.lang.swift.decl.enumelement",
                  "key.length" : 10,
                  "key.line" : 37,
                  "key.name" : "first(_:)",
                  "key.namelength" : 10,
                  "key.nameoffset" : 729,
                  "key.offset" : 729,
                  "key.parsed_declaration" : "case first(Int)",
                  "key.parsed_scope.end" : 37,
                  "key.parsed_scope.start" : 37,
                  "key.typename" : "(AnEnum.Type) -> (Int) -> AnEnum",
                  "key.typeusr" : "$sy14SpmSwiftModule6AnEnumOSicACmcD",
                  "key.usr" : "s:14SpmSwiftModule6AnEnumO5firstyACSicACmF"
                }
              ]
            },
            {
              "key.kind" : "source.lang.swift.decl.enumcase",
              "key.length" : 11,
              "key.namelength" : 0,
              "key.nameoffset" : 0,
              "key.offset" : 764,
              "key.substructure" : [
                {
                  "key.accessibility" : "source.lang.swift.accessibility.public",
                  "key.annotated_decl" : "<Declaration>case second<\/Declaration>",
                  "key.bb.documentation" : {
                    "key.bb.abstract" : {
                      "en" : "Second case"
                    },
                    "key.bb.doc_source" : "docComment"
                  },
                  "key.bb.is_override" : false,
                  "key.bb.is_spi" : false,
                  "key.bb.swift_declaration" : "case second",
                  "key.bb.swift_deprecated_everywhere" : false,
                  "key.bb.swift_name_pieces" : [
                    {
                      "key.bb.name_piece_is_name" : false,
                      "key.bb.name_piece_text" : "case "
                    },
                    {
                      "key.bb.name_piece_is_name" : true,
                      "key.bb.name_piece_text" : "second"
                    }
                  ],
                  "key.column" : 10,
                  "key.decl_lang" : "source.lang.swift",
                  "key.doc.column" : 10,
                  "key.doc.comment" : "Second case",
                  "key.doc.declaration" : "",
                  "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
                  "key.doc.full_as_xml" : "<Other file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"39\" column=\"10\"><Name>second<\/Name><USR>s:14SpmSwiftModule6AnEnumO6secondyA2CmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Second case<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line" : 39,
                  "key.doc.name" : "second",
                  "key.doc.type" : "Other",
                  "key.doclength" : 16,
                  "key.docoffset" : 744,
                  "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
                  "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>second<\/decl.name><\/decl.enumelement>",
                  "key.kind" : "source.lang.swift.decl.enumelement",
                  "key.length" : 6,
                  "key.line" : 39,
                  "key.name" : "second",
                  "key.namelength" : 6,
                  "key.nameoffset" : 769,
                  "key.offset" : 769,
                  "key.parsed_declaration" : "case second",
                  "key.parsed_scope.end" : 39,
                  "key.parsed_scope.start" : 39,
                  "key.typename" : "(AnEnum.Type) -> AnEnum",
                  "key.typeusr" : "$sy14SpmSwiftModule6AnEnumOACmcD",
                  "key.usr" : "s:14SpmSwiftModule6AnEnumO6secondyA2CmF"
                }
              ]
            },
            {
              "key.kind" : "source.lang.swift.decl.enumcase",
              "key.length" : 18,
              "key.namelength" : 0,
              "key.nameoffset" : 0,
              "key.offset" : 820,
              "key.substructure" : [
                {
                  "key.accessibility" : "source.lang.swift.accessibility.public",
                  "key.annotated_decl" : "<Declaration>case third<\/Declaration>",
                  "key.bb.documentation" : {
                    "key.bb.abstract" : {
                      "en" : "Third & Fourth cases - `second`"
                    },
                    "key.bb.doc_source" : "docComment"
                  },
                  "key.bb.is_override" : false,
                  "key.bb.is_spi" : false,
                  "key.bb.swift_declaration" : "case third",
                  "key.bb.swift_deprecated_everywhere" : false,
                  "key.bb.swift_name_pieces" : [
                    {
                      "key.bb.name_piece_is_name" : false,
                      "key.bb.name_piece_text" : "case "
                    },
                    {
                      "key.bb.name_piece_is_name" : true,
                      "key.bb.name_piece_text" : "third"
                    }
                  ],
                  "key.column" : 10,
                  "key.decl_lang" : "source.lang.swift",
                  "key.doc.column" : 10,
                  "key.doc.comment" : "Third & Fourth cases - `second`",
                  "key.doc.declaration" : "",
                  "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
                  "key.doc.full_as_xml" : "<Other file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"41\" column=\"10\"><Name>third<\/Name><USR>s:14SpmSwiftModule6AnEnumO5thirdyA2CmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Third &amp; Fourth cases - <codeVoice>second<\/codeVoice><\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line" : 41,
                  "key.doc.name" : "third",
                  "key.doc.type" : "Other",
                  "key.doclength" : 36,
                  "key.docoffset" : 780,
                  "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
                  "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>third<\/decl.name><\/decl.enumelement>",
                  "key.kind" : "source.lang.swift.decl.enumelement",
                  "key.length" : 5,
                  "key.line" : 41,
                  "key.name" : "third",
                  "key.namelength" : 5,
                  "key.nameoffset" : 825,
                  "key.offset" : 825,
                  "key.parsed_declaration" : "case third",
                  "key.parsed_scope.end" : 41,
                  "key.parsed_scope.start" : 41,
                  "key.typename" : "(AnEnum.Type) -> AnEnum",
                  "key.typeusr" : "$sy14SpmSwiftModule6AnEnumOACmcD",
                  "key.usr" : "s:14SpmSwiftModule6AnEnumO5thirdyA2CmF"
                },
                {
                  "key.accessibility" : "source.lang.swift.accessibility.public",
                  "key.annotated_decl" : "<Declaration>case fourth<\/Declaration>",
                  "key.bb.documentation" : {
                    "key.bb.abstract" : {
                      "en" : "Third & Fourth cases - `second`"
                    },
                    "key.bb.doc_source" : "docComment"
                  },
                  "key.bb.is_override" : false,
                  "key.bb.is_spi" : false,
                  "key.bb.swift_declaration" : "case fourth",
                  "key.bb.swift_deprecated_everywhere" : false,
                  "key.bb.swift_name_pieces" : [
                    {
                      "key.bb.name_piece_is_name" : false,
                      "key.bb.name_piece_text" : "case "
                    },
                    {
                      "key.bb.name_piece_is_name" : true,
                      "key.bb.name_piece_text" : "fourth"
                    }
                  ],
                  "key.column" : 17,
                  "key.decl_lang" : "source.lang.swift",
                  "key.doc.column" : 17,
                  "key.doc.declaration" : "",
                  "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
                  "key.doc.full_as_xml" : "<Other file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"41\" column=\"17\"><Name>fourth<\/Name><USR>s:14SpmSwiftModule6AnEnumO6fourthyA2CmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Third &amp; Fourth cases - <codeVoice>second<\/codeVoice><\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line" : 41,
                  "key.doc.name" : "fourth",
                  "key.doc.type" : "Other",
                  "key.doclength" : 36,
                  "key.docoffset" : 780,
                  "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
                  "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>fourth<\/decl.name><\/decl.enumelement>",
                  "key.kind" : "source.lang.swift.decl.enumelement",
                  "key.length" : 6,
                  "key.line" : 41,
                  "key.name" : "fourth",
                  "key.namelength" : 6,
                  "key.nameoffset" : 832,
                  "key.offset" : 832,
                  "key.parsed_declaration" : "case third, fourth",
                  "key.parsed_scope.end" : 41,
                  "key.parsed_scope.start" : 41,
                  "key.typename" : "(AnEnum.Type) -> AnEnum",
                  "key.typeusr" : "$sy14SpmSwiftModule6AnEnumOACmcD",
                  "key.usr" : "s:14SpmSwiftModule6AnEnumO6fourthyA2CmF"
                }
              ]
            },
            {
              "key.kind" : "source.lang.swift.decl.enumcase",
              "key.length" : 30,
              "key.namelength" : 0,
              "key.nameoffset" : 0,
              "key.offset" : 862,
              "key.substructure" : [
                {
                  "key.accessibility" : "source.lang.swift.accessibility.public",
                  "key.annotated_decl" : "<Declaration>case fifth(a: <Type usr=\"s:SS\">String<\/Type>, _: <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                  "key.bb.documentation" : {
                    "key.bb.abstract" : {
                      "en" : "Fifth case"
                    },
                    "key.bb.doc_source" : "docComment"
                  },
                  "key.bb.is_override" : false,
                  "key.bb.is_spi" : false,
                  "key.bb.swift_declaration" : "case fifth(a: String, _: Int)",
                  "key.bb.swift_deprecated_everywhere" : false,
                  "key.bb.swift_name_pieces" : [
                    {
                      "key.bb.name_piece_is_name" : false,
                      "key.bb.name_piece_text" : "case "
                    },
                    {
                      "key.bb.name_piece_is_name" : true,
                      "key.bb.name_piece_text" : "fifth"
                    },
                    {
                      "key.bb.name_piece_is_name" : false,
                      "key.bb.name_piece_text" : "("
                    },
                    {
                      "key.bb.name_piece_is_name" : true,
                      "key.bb.name_piece_text" : "a"
                    },
                    {
                      "key.bb.name_piece_is_name" : false,
                      "key.bb.name_piece_text" : ": String, Int)"
                    }
                  ],
                  "key.column" : 10,
                  "key.decl_lang" : "source.lang.swift",
                  "key.doc.column" : 10,
                  "key.doc.comment" : "Fifth case",
                  "key.doc.declaration" : "",
                  "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
                  "key.doc.full_as_xml" : "<Other file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"43\" column=\"10\"><Name>fifth(a:_:)<\/Name><USR>s:14SpmSwiftModule6AnEnumO5fifthyACSS_SitcACmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Fifth case<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line" : 43,
                  "key.doc.name" : "fifth(a:_:)",
                  "key.doc.type" : "Other",
                  "key.doclength" : 15,
                  "key.docoffset" : 843,
                  "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
                  "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>fifth<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>a<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                  "key.kind" : "source.lang.swift.decl.enumelement",
                  "key.length" : 25,
                  "key.line" : 43,
                  "key.name" : "fifth(a:_:)",
                  "key.namelength" : 25,
                  "key.nameoffset" : 867,
                  "key.offset" : 867,
                  "key.parsed_declaration" : "case fifth(a: String,_ b: Int)",
                  "key.parsed_scope.end" : 43,
                  "key.parsed_scope.start" : 43,
                  "key.typename" : "(AnEnum.Type) -> (String, Int) -> AnEnum",
                  "key.typeusr" : "$sy14SpmSwiftModule6AnEnumOSS_SitcACmcD",
                  "key.usr" : "s:14SpmSwiftModule6AnEnumO5fifthyACSS_SitcACmF"
                }
              ]
            }
          ],
          "key.typename" : "AnEnum.Type",
          "key.typeusr" : "$s14SpmSwiftModule6AnEnumOmD",
          "key.usr" : "s:14SpmSwiftModule6AnEnumO"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public func functionA(arg1: <Type usr=\"s:Si\">Int<\/Type>, _ arg2: <Type usr=\"s:Si\">Int<\/Type>, arg3 argMeaning: <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.length" : 6,
              "key.offset" : 1156
            },
            {
              "key.attribute" : "source.decl.attribute.available",
              "key.length" : 74,
              "key.offset" : 1081
            },
            {
              "key.attribute" : "source.decl.attribute.available",
              "key.length" : 33,
              "key.offset" : 1047
            },
            {
              "key.attribute" : "source.decl.attribute.available",
              "key.length" : 33,
              "key.offset" : 1047
            }
          ],
          "key.bb.availabilities" : [
            {
              "key.bb.availability" : "iOS 9+"
            },
            {
              "key.bb.availability" : "macOS 10.12+"
            }
          ],
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "See `SpmSwiftModule` – or `SpmSwiftModule.ABaseClass`."
            },
            "key.bb.doc_source" : "docComment",
            "key.bb.parameters" : [
              {
                "key.bb.param_desc" : {
                  "en" : "Number one"
                },
                "key.bb.param_name" : "arg1"
              },
              {
                "key.bb.param_desc" : {
                  "en" : "Second"
                },
                "key.bb.param_name" : "arg2"
              },
              {
                "key.bb.param_desc" : {
                  "en" : "Third"
                },
                "key.bb.param_name" : "arg3"
              }
            ]
          },
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "public func functionA(\n    arg1: Int,\n    _ arg2: Int,\n    arg3 argMeaning: Int)",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "func "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "functionA"
            },
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "("
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "arg1"
            },
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : ": Int, Int, "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "arg3"
            },
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : ": Int)"
            }
          ],
          "key.bb.swift_unavailable_messages" : {
            "en" : "tvOS - unavailable. Not available on the big screen."
          },
          "key.bodylength" : 1,
          "key.bodyoffset" : 1269,
          "key.column" : 13,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.column" : 13,
          "key.doc.comment" : "- parameters:\n   - arg1: Number one\n   - arg2: Second\n   - arg3: Third\n\nSee `SpmSwiftModule` -- or `SpmSwiftModule.ABaseClass`.",
          "key.doc.declaration" : "@available(iOS 9, macOS 10.12, *)\n@available(tvOS, unavailable, message: \"Not available on the big screen.\")\npublic func functionA(arg1: Int, _ arg2: Int, arg3 argMeaning: Int)",
          "key.doc.discussion" : [
            {
              "Para" : "See `SpmSwiftModule` – or `SpmSwiftModule.ABaseClass`."
            }
          ],
          "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"54\" column=\"13\"><Name>functionA(arg1:_:arg3:)<\/Name><USR>s:14SpmSwiftModule9functionA4arg1_4arg3ySi_S2itF<\/USR><Declaration>@available(iOS 9, macOS 10.12, *)\n@available(tvOS, unavailable, message: &quot;Not available on the big screen.&quot;)\npublic func functionA(arg1: Int, _ arg2: Int, arg3 argMeaning: Int)<\/Declaration><CommentParts><Parameters><Parameter><Name>arg1<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Number one<\/Para><\/Discussion><\/Parameter><Parameter><Name>arg2<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Second<\/Para><\/Discussion><\/Parameter><Parameter><Name>arg3<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Third<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>See <codeVoice>SpmSwiftModule<\/codeVoice> – or <codeVoice>SpmSwiftModule.ABaseClass<\/codeVoice>.<\/Para><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.line" : 54,
          "key.doc.name" : "functionA(arg1:_:arg3:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "Number one"
                }
              ],
              "name" : "arg1"
            },
            {
              "discussion" : [
                {
                  "Para" : "Second"
                }
              ],
              "name" : "arg2"
            },
            {
              "discussion" : [
                {
                  "Para" : "Third"
                }
              ],
              "name" : "arg3"
            }
          ],
          "key.doc.type" : "Function",
          "key.doclength" : 151,
          "key.docoffset" : 896,
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>functionA<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>arg1<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>arg3<\/decl.var.parameter.argument_label> <decl.var.parameter.name>argMeaning<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.free>",
          "key.kind" : "source.lang.swift.decl.function.free",
          "key.length" : 108,
          "key.line" : 54,
          "key.name" : "functionA(arg1:_:arg3:)",
          "key.namelength" : 99,
          "key.nameoffset" : 1168,
          "key.offset" : 1163,
          "key.parsed_declaration" : "public func functionA(arg1: Int,\n                      _ arg2: Int,\n                      arg3 argMeaning: Int)",
          "key.parsed_scope.end" : 57,
          "key.parsed_scope.start" : 54,
          "key.typename" : "(Int, Int, Int) -> ()",
          "key.typeusr" : "$s4arg1_4arg3ySi_S2itcD",
          "key.usr" : "s:14SpmSwiftModule9functionA4arg1_4arg3ySi_S2itF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public func deprecatedFunction(callback: (_ report: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.length" : 6,
              "key.offset" : 1525
            },
            {
              "key.attribute" : "source.decl.attribute.available",
              "key.length" : 25,
              "key.offset" : 1499
            },
            {
              "key.attribute" : "source.decl.attribute.available",
              "key.length" : 74,
              "key.offset" : 1424
            },
            {
              "key.attribute" : "source.decl.attribute.available",
              "key.length" : 57,
              "key.offset" : 1366
            }
          ],
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "A deprecated function"
            },
            "key.bb.doc_source" : "docComment",
            "key.bb.parameters" : [
              {
                "key.bb.param_desc" : {
                  "en" : "The callback"
                },
                "key.bb.param_name" : "callback"
              }
            ],
            "key.bb.returns" : {
              "en" : "A string"
            }
          },
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "public func deprecatedFunction(callback: (_ report: String) -> Int) -> String",
          "key.bb.swift_deprecated_everywhere" : true,
          "key.bb.swift_deprecation_messages" : {
            "en" : "iOS - deprecated since 12.0. Deprecated!.\n\nmacOS - deprecated since 10.14. Deprecated on *macOS* too.\n\nDeprecated."
          },
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "func "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "deprecatedFunction"
            },
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "("
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "callback"
            },
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : ": (_ report: String) -> Int) -> String"
            }
          ],
          "key.bodylength" : 13,
          "key.bodyoffset" : 1604,
          "key.column" : 13,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.column" : 13,
          "key.doc.comment" : "A deprecated function\n\n- parameter callback: The callback\n- returns: A string",
          "key.doc.declaration" : "@available(iOS, deprecated: 12.0, message: \"Deprecated!\")\n@available(macOS, deprecated: 10.14, message: \"Deprecated on *macOS* too\")\n@available(*, deprecated)\npublic func deprecatedFunction(callback: (_ report: String) -> Int) -> String",
          "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"66\" column=\"13\"><Name>deprecatedFunction(callback:)<\/Name><USR>s:14SpmSwiftModule18deprecatedFunction8callbackSSSiSSXE_tF<\/USR><Declaration>@available(iOS, deprecated: 12.0, message: &quot;Deprecated!&quot;)\n@available(macOS, deprecated: 10.14, message: &quot;Deprecated on *macOS* too&quot;)\n@available(*, deprecated)\npublic func deprecatedFunction(callback: (_ report: String) -&gt; Int) -&gt; String<\/Declaration><CommentParts><Abstract><Para>A deprecated function<\/Para><\/Abstract><Parameters><Parameter><Name>callback<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The callback<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>A string<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line" : 66,
          "key.doc.name" : "deprecatedFunction(callback:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The callback"
                }
              ],
              "name" : "callback"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "A string"
            }
          ],
          "key.doc.type" : "Function",
          "key.doclength" : 93,
          "key.docoffset" : 1273,
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>deprecatedFunction<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>callback<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>report<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
          "key.kind" : "source.lang.swift.decl.function.free",
          "key.length" : 86,
          "key.line" : 66,
          "key.name" : "deprecatedFunction(callback:)",
          "key.namelength" : 55,
          "key.nameoffset" : 1537,
          "key.offset" : 1532,
          "key.parsed_declaration" : "public func deprecatedFunction(callback: (_ report: String) -> Int) -> String",
          "key.parsed_scope.end" : 68,
          "key.parsed_scope.start" : 66,
          "key.typename" : "((String) -> Int) -> String",
          "key.typeusr" : "$s8callbackSSSiSSXE_tcD",
          "key.usr" : "s:14SpmSwiftModule18deprecatedFunction8callbackSSSiSSXE_tF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public class ABaseClass<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.length" : 6,
              "key.offset" : 1637
            }
          ],
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "A base class"
            },
            "key.bb.doc_source" : "docComment"
          },
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "public class ABaseClass",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "class "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "ABaseClass"
            }
          ],
          "key.bodylength" : 634,
          "key.bodyoffset" : 1662,
          "key.column" : 14,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.column" : 14,
          "key.doc.comment" : "A base class",
          "key.doc.declaration" : "public class ABaseClass",
          "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.doc.full_as_xml" : "<Class file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"71\" column=\"14\"><Name>ABaseClass<\/Name><USR>s:14SpmSwiftModule10ABaseClassC<\/USR><Declaration>public class ABaseClass<\/Declaration><CommentParts><Abstract><Para>A base class<\/Para><\/Abstract><\/CommentParts><\/Class>",
          "key.doc.line" : 71,
          "key.doc.name" : "ABaseClass",
          "key.doc.type" : "Class",
          "key.doclength" : 17,
          "key.docoffset" : 1620,
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>ABaseClass<\/decl.name><\/decl.class>",
          "key.kind" : "source.lang.swift.decl.class",
          "key.length" : 653,
          "key.line" : 71,
          "key.name" : "ABaseClass",
          "key.namelength" : 10,
          "key.nameoffset" : 1650,
          "key.offset" : 1644,
          "key.parsed_declaration" : "public class ABaseClass",
          "key.parsed_scope.end" : 110,
          "key.parsed_scope.start" : 71,
          "key.substructure" : [
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public init()<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.length" : 6,
                  "key.offset" : 1665
                }
              ],
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "public init()",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "init"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "()"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 1680,
              "key.column" : 10,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>()<\/decl.function.constructor>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 9,
              "key.line" : 72,
              "key.name" : "init()",
              "key.namelength" : 6,
              "key.nameoffset" : 1672,
              "key.offset" : 1672,
              "key.parsed_declaration" : "public init()",
              "key.parsed_scope.end" : 72,
              "key.parsed_scope.start" : 72,
              "key.related_decls" : [
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule10ABaseClassC1aACSi_tcfc\">init(a:)<\/RelatedName>"
                }
              ],
              "key.typename" : "(ABaseClass.Type) -> () -> ABaseClass",
              "key.typeusr" : "$s14SpmSwiftModule10ABaseClassCycD",
              "key.usr" : "s:14SpmSwiftModule10ABaseClassCACycfc"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public convenience init(a: <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.convenience",
                  "key.length" : 11,
                  "key.offset" : 1692
                },
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.length" : 6,
                  "key.offset" : 1685
                }
              ],
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "public convenience init(a: Int)",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "init"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "("
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "a"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": Int)"
                }
              ],
              "key.bodylength" : 13,
              "key.bodyoffset" : 1718,
              "key.column" : 22,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>convenience<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>a<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 28,
              "key.line" : 74,
              "key.name" : "init(a:)",
              "key.namelength" : 12,
              "key.nameoffset" : 1704,
              "key.offset" : 1704,
              "key.parsed_declaration" : "public convenience init(a: Int)",
              "key.parsed_scope.end" : 74,
              "key.parsed_scope.start" : 74,
              "key.related_decls" : [
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule10ABaseClassCACycfc\">init()<\/RelatedName>"
                }
              ],
              "key.typename" : "(ABaseClass.Type) -> (Int) -> ABaseClass",
              "key.typeusr" : "$s1a14SpmSwiftModule10ABaseClassCSi_tcD",
              "key.usr" : "s:14SpmSwiftModule10ABaseClassC1aACSi_tcfc"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>deinit<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "deinit",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "deinit"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 1744,
              "key.column" : 3,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.function.destructor><syntaxtype.keyword>deinit<\/syntaxtype.keyword><\/decl.function.destructor>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 9,
              "key.line" : 76,
              "key.name" : "deinit",
              "key.namelength" : 6,
              "key.nameoffset" : 1736,
              "key.offset" : 1736,
              "key.parsed_declaration" : "deinit",
              "key.parsed_scope.end" : 76,
              "key.parsed_scope.start" : 76,
              "key.typename" : "(ABaseClass) -> () -> ()",
              "key.typeusr" : "$syycD",
              "key.usr" : "s:14SpmSwiftModule10ABaseClassCfd"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public func method(param: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.length" : 6,
                  "key.offset" : 1791
                }
              ],
              "key.bb.documentation" : {
                "key.bb.abstract" : {
                  "en" : "Base class docs for `method(param:)`"
                },
                "key.bb.doc_source" : "docComment"
              },
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "public func method(param: Int) -> String",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "method"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "("
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "param"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": Int) -> String"
                }
              ],
              "key.bodylength" : 17,
              "key.bodyoffset" : 1833,
              "key.column" : 15,
              "key.decl_lang" : "source.lang.swift",
              "key.doc.column" : 15,
              "key.doc.comment" : "Base class docs for `method(param:)`",
              "key.doc.declaration" : "public func method(param: Int) -> String",
              "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.doc.full_as_xml" : "<Function file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"78\" column=\"15\"><Name>method(param:)<\/Name><USR>s:14SpmSwiftModule10ABaseClassC6method5paramSSSi_tF<\/USR><Declaration>public func method(param: Int) -&gt; String<\/Declaration><CommentParts><Abstract><Para>Base class docs for <codeVoice>method(param:)<\/codeVoice><\/Para><\/Abstract><\/CommentParts><\/Function>",
              "key.doc.line" : 78,
              "key.doc.name" : "method(param:)",
              "key.doc.type" : "Function",
              "key.doclength" : 41,
              "key.docoffset" : 1748,
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>method<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>param<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 53,
              "key.line" : 78,
              "key.name" : "method(param:)",
              "key.namelength" : 18,
              "key.nameoffset" : 1803,
              "key.offset" : 1798,
              "key.parsed_declaration" : "public func method(param: Int) -> String",
              "key.parsed_scope.end" : 80,
              "key.parsed_scope.start" : 78,
              "key.typename" : "(ABaseClass) -> (Int) -> String",
              "key.typeusr" : "$s5paramSSSi_tcD",
              "key.usr" : "s:14SpmSwiftModule10ABaseClassC6method5paramSSSi_tF"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public static func staticMethod() -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.length" : 6,
                  "key.offset" : 1855
                }
              ],
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "public static func staticMethod() -> Int",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "static func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "staticMethod"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "() -> Int"
                }
              ],
              "key.bodylength" : 16,
              "key.bodyoffset" : 1897,
              "key.column" : 22,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>staticMethod<\/decl.name>() -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.method.static>",
              "key.kind" : "source.lang.swift.decl.function.method.static",
              "key.length" : 52,
              "key.line" : 82,
              "key.name" : "staticMethod()",
              "key.namelength" : 14,
              "key.nameoffset" : 1874,
              "key.offset" : 1862,
              "key.parsed_declaration" : "public static func staticMethod() -> Int",
              "key.parsed_scope.end" : 84,
              "key.parsed_scope.start" : 82,
              "key.typename" : "(ABaseClass.Type) -> () -> Int",
              "key.typeusr" : "$sSiycD",
              "key.usr" : "s:14SpmSwiftModule10ABaseClassC12staticMethodSiyFZ"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public subscript(arg: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type> { get set }<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.length" : 6,
                  "key.offset" : 1918
                }
              ],
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "public subscript(arg: String) -> Int { get set }",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "subscript"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "("
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "arg"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": String) -> Int"
                }
              ],
              "key.bodylength" : 50,
              "key.bodyoffset" : 1956,
              "key.column" : 10,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
              "key.kind" : "source.lang.swift.decl.function.subscript",
              "key.length" : 82,
              "key.line" : 86,
              "key.name" : "subscript(_:)",
              "key.namelength" : 22,
              "key.nameoffset" : 1925,
              "key.offset" : 1925,
              "key.parsed_declaration" : "public subscript(arg: String) -> Int",
              "key.parsed_scope.end" : 92,
              "key.parsed_scope.start" : 86,
              "key.related_decls" : [
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule10ABaseClassCySiSScipZ\">subscript(_:)<\/RelatedName>"
                },
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule10ABaseClassCySSSicipZ\">subscript(_:)<\/RelatedName>"
                }
              ],
              "key.setter_accessibility" : "source.lang.swift.accessibility.public",
              "key.typename" : "(String) -> Int",
              "key.typeusr" : "$sySiSScD",
              "key.usr" : "s:14SpmSwiftModule10ABaseClassCySiSScip"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public static subscript(arg: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.length" : 6,
                  "key.offset" : 2011
                }
              ],
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "public static subscript(arg: String) -> Int { get }",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "static "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "subscript"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "("
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "arg"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": String) -> Int"
                }
              ],
              "key.bodylength" : 16,
              "key.bodyoffset" : 2056,
              "key.column" : 17,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.function.subscript>",
              "key.kind" : "source.lang.swift.decl.function.subscript",
              "key.length" : 48,
              "key.line" : 94,
              "key.name" : "subscript(_:)",
              "key.namelength" : 22,
              "key.nameoffset" : 2025,
              "key.offset" : 2025,
              "key.parsed_declaration" : "public static subscript(arg: String) -> Int",
              "key.parsed_scope.end" : 96,
              "key.parsed_scope.start" : 94,
              "key.related_decls" : [
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule10ABaseClassCySiSScip\">subscript(_:)<\/RelatedName>"
                },
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule10ABaseClassCySSSicipZ\">subscript(_:)<\/RelatedName>"
                }
              ],
              "key.typename" : "(String) -> Int",
              "key.typeusr" : "$sySiSScD",
              "key.usr" : "s:14SpmSwiftModule10ABaseClassCySiSScipZ"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public class subscript(arg: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:SS\">String<\/Type> { get }<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.length" : 6,
                  "key.offset" : 2077
                }
              ],
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "public class subscript(arg: Int) -> String { get }",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "class "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "subscript"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "("
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "arg"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": Int) -> String"
                }
              ],
              "key.bodylength" : 17,
              "key.bodyoffset" : 2121,
              "key.column" : 16,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.function.subscript>",
              "key.kind" : "source.lang.swift.decl.function.subscript",
              "key.length" : 49,
              "key.line" : 98,
              "key.name" : "subscript(_:)",
              "key.namelength" : 19,
              "key.nameoffset" : 2090,
              "key.offset" : 2090,
              "key.parsed_declaration" : "public class subscript(arg: Int) -> String",
              "key.parsed_scope.end" : 100,
              "key.parsed_scope.start" : 98,
              "key.related_decls" : [
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule10ABaseClassCySiSScip\">subscript(_:)<\/RelatedName>"
                },
                {
                  "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule10ABaseClassCySiSScipZ\">subscript(_:)<\/RelatedName>"
                }
              ],
              "key.typename" : "(Int) -> String",
              "key.typeusr" : "$sySSSicD",
              "key.usr" : "s:14SpmSwiftModule10ABaseClassCySSSicipZ"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>static var aStaticVar: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "static var aStaticVar: Int { get }",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "static var "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "aStaticVar"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": Int"
                }
              ],
              "key.bodylength" : 9,
              "key.bodyoffset" : 2171,
              "key.column" : 14,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>aStaticVar<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
              "key.kind" : "source.lang.swift.decl.var.static",
              "key.length" : 38,
              "key.line" : 102,
              "key.name" : "aStaticVar",
              "key.namelength" : 10,
              "key.nameoffset" : 2154,
              "key.offset" : 2143,
              "key.parsed_declaration" : "static var aStaticVar: Int",
              "key.parsed_scope.end" : 104,
              "key.parsed_scope.start" : 102,
              "key.typename" : "Int",
              "key.typeusr" : "$sSiD",
              "key.usr" : "s:14SpmSwiftModule10ABaseClassC10aStaticVarSivpZ"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public static func + (lhs: <Type usr=\"s:14SpmSwiftModule10ABaseClassC\">ABaseClass<\/Type>, rhs: <Type usr=\"s:14SpmSwiftModule10ABaseClassC\">ABaseClass<\/Type>) -&gt; <Type usr=\"s:14SpmSwiftModule10ABaseClassC\">ABaseClass<\/Type><\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.length" : 6,
                  "key.offset" : 2204
                }
              ],
              "key.bb.documentation" : {
                "key.bb.abstract" : {
                  "en" : "An operator\\!"
                },
                "key.bb.doc_source" : "docComment"
              },
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "public static func + (lhs: ABaseClass, rhs: ABaseClass) -> ABaseClass",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "static func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "+"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "("
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "lhs"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": ABaseClass, "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "rhs"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": ABaseClass) -> ABaseClass"
                }
              ],
              "key.bodylength" : 20,
              "key.bodyoffset" : 2274,
              "key.column" : 22,
              "key.decl_lang" : "source.lang.swift",
              "key.doc.column" : 22,
              "key.doc.comment" : "An operator!",
              "key.doc.declaration" : "public static func + (lhs: ABaseClass, rhs: ABaseClass) -> ABaseClass",
              "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.doc.full_as_xml" : "<Function file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"107\" column=\"22\"><Name>+(_:_:)<\/Name><USR>s:14SpmSwiftModule10ABaseClassC1poiyA2C_ACtFZ<\/USR><Declaration>public static func + (lhs: ABaseClass, rhs: ABaseClass) -&gt; ABaseClass<\/Declaration><CommentParts><Abstract><Para>An operator!<\/Para><\/Abstract><\/CommentParts><\/Function>",
              "key.doc.line" : 107,
              "key.doc.name" : "+(_:_:)",
              "key.doc.type" : "Function",
              "key.doclength" : 17,
              "key.docoffset" : 2185,
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>+ <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:14SpmSwiftModule10ABaseClassC\">ABaseClass<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:14SpmSwiftModule10ABaseClassC\">ABaseClass<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.class usr=\"s:14SpmSwiftModule10ABaseClassC\">ABaseClass<\/ref.class><\/decl.function.returntype><\/decl.function.operator.infix>",
              "key.kind" : "source.lang.swift.decl.function.method.static",
              "key.length" : 84,
              "key.line" : 107,
              "key.name" : "+(ABaseClass, ABaseClass)",
              "key.namelength" : 35,
              "key.nameoffset" : 2223,
              "key.offset" : 2211,
              "key.parsed_declaration" : "public static func +(lhs: ABaseClass, rhs: ABaseClass) -> ABaseClass",
              "key.parsed_scope.end" : 109,
              "key.parsed_scope.start" : 107,
              "key.substructure" : [
                {
                  "key.annotated_decl" : "<Declaration>let lhs: <Type usr=\"s:14SpmSwiftModule10ABaseClassC\">ABaseClass<\/Type><\/Declaration>",
                  "key.bb.is_override" : false,
                  "key.bb.is_spi" : false,
                  "key.bb.swift_declaration" : "let lhs: ABaseClass",
                  "key.bb.swift_deprecated_everywhere" : false,
                  "key.bb.swift_name_pieces" : [
                    {
                      "key.bb.name_piece_is_name" : true,
                      "key.bb.name_piece_text" : "lhs"
                    },
                    {
                      "key.bb.name_piece_is_name" : false,
                      "key.bb.name_piece_text" : ": ABaseClass"
                    }
                  ],
                  "key.column" : 24,
                  "key.decl_lang" : "source.lang.swift",
                  "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
                  "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:14SpmSwiftModule10ABaseClassC\">ABaseClass<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>",
                  "key.kind" : "source.lang.swift.decl.var.parameter",
                  "key.length" : 3,
                  "key.line" : 107,
                  "key.name" : "lhs",
                  "key.offset" : 2225,
                  "key.parent_loc" : 2223,
                  "key.parsed_declaration" : "public static func +(lhs",
                  "key.parsed_scope.end" : 107,
                  "key.parsed_scope.start" : 107,
                  "key.typename" : "ABaseClass",
                  "key.typeusr" : "$s14SpmSwiftModule10ABaseClassCD",
                  "key.usr" : "s:14SpmSwiftModule10ABaseClassC1poiyA2C_ACtFZ3lhsL_ACvp"
                }
              ],
              "key.typename" : "(ABaseClass.Type) -> (ABaseClass, ABaseClass) -> ABaseClass",
              "key.typeusr" : "$sy14SpmSwiftModule10ABaseClassCAC_ACtcD",
              "key.usr" : "s:14SpmSwiftModule10ABaseClassC1poiyA2C_ACtFZ"
            }
          ],
          "key.typename" : "ABaseClass.Type",
          "key.typeusr" : "$s14SpmSwiftModule10ABaseClassCmD",
          "key.usr" : "s:14SpmSwiftModule10ABaseClassC"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>struct T<\/Declaration>",
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "struct T",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "struct "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "T"
            }
          ],
          "key.bodylength" : 1,
          "key.bodyoffset" : 2309,
          "key.column" : 8,
          "key.decl_lang" : "source.lang.swift",
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>T<\/decl.name><\/decl.struct>",
          "key.kind" : "source.lang.swift.decl.struct",
          "key.length" : 12,
          "key.line" : 112,
          "key.name" : "T",
          "key.namelength" : 1,
          "key.nameoffset" : 2306,
          "key.offset" : 2299,
          "key.parsed_declaration" : "struct T",
          "key.parsed_scope.end" : 113,
          "key.parsed_scope.start" : 112,
          "key.typename" : "T.Type",
          "key.typeusr" : "$s14SpmSwiftModule1TVmD",
          "key.usr" : "s:14SpmSwiftModule1TV"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>func + (lhs: <Type usr=\"s:14SpmSwiftModule1TV\">T<\/Type>, rhs: <Type usr=\"s:14SpmSwiftModule1TV\">T<\/Type>) -&gt; <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "Unscoped operator"
            },
            "key.bb.doc_source" : "docComment"
          },
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "func + (lhs: T, rhs: T) -> String",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "static func "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "+"
            },
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "("
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "lhs"
            },
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : ": T, "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "rhs"
            },
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : ": T) -> String"
            }
          ],
          "key.bodylength" : 6,
          "key.bodyoffset" : 2369,
          "key.column" : 6,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.column" : 6,
          "key.doc.comment" : "Unscoped operator",
          "key.doc.declaration" : "func + (lhs: T, rhs: T) -> String",
          "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"116\" column=\"6\"><Name>+(_:_:)<\/Name><USR>s:14SpmSwiftModule1poiySSAA1TV_ADtF<\/USR><Declaration>func + (lhs: T, rhs: T) -&gt; String<\/Declaration><CommentParts><Abstract><Para>Unscoped operator<\/Para><\/Abstract><\/CommentParts><\/Function>",
          "key.doc.line" : 116,
          "key.doc.name" : "+(_:_:)",
          "key.doc.type" : "Function",
          "key.doclength" : 22,
          "key.docoffset" : 2313,
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>+ <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:14SpmSwiftModule1TV\">T<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:14SpmSwiftModule1TV\">T<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.function.operator.infix>",
          "key.kind" : "source.lang.swift.decl.function.free",
          "key.length" : 41,
          "key.line" : 116,
          "key.name" : "+(T, T)",
          "key.namelength" : 17,
          "key.nameoffset" : 2340,
          "key.offset" : 2335,
          "key.parsed_declaration" : "func +(lhs: T, rhs: T) -> String",
          "key.parsed_scope.end" : 118,
          "key.parsed_scope.start" : 116,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:14SpmSwiftModule10ABaseClassC1poiyA2C_ACtFZ\">+ (_: ABaseClass, _: ABaseClass) -&gt; ABaseClass<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:Sa1poiySayxGAB_ABtFZ\">+ (_: Array&lt;Element&gt;, _: Array&lt;Element&gt;) -&gt; Array&lt;Element&gt;<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:SF1poiyxx_xtFZ\">+ (_: Self, _: Self) -&gt; Self<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:s18AdditiveArithmeticP1poiyxx_xtFZ\">+ (_: Self, _: Self) -&gt; Self<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:s18AdditiveArithmeticPsE1popyxxFZ\">+(_:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:Sz1poiyxx_xtFZ\">+ (_: Self, _: Self) -&gt; Self<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:Sxss8_PointerRzrlE1poiyxx_6StrideQztFZ\">+ (_: Self, _: Self.Stride) -&gt; Self<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:Sxss8_PointerRzrlE1poiyx6StrideQz_xtFZ\">+ (_: Self.Stride, _: Self) -&gt; Self<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:SmsE1poiyxx_qd__tSTRd__7ElementQyd__ABRtzlFZ\">+ &lt;Other&gt;(_: Self, _: Other) -&gt; Self where Other : Sequence, Self.Element == Other.Element<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:SmsE1poiyxqd___xtSTRd__7ElementQyd__ABRtzlFZ\">+ &lt;Other&gt;(_: Other, _: Self) -&gt; Self where Other : Sequence, Self.Element == Other.Element<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:SmsE1poiyxx_qd__tSmRd__7ElementQyd__ABRtzlFZ\">+ &lt;Other&gt;(_: Self, _: Other) -&gt; Self where Other : RangeReplaceableCollection, Self.Element == Other.Element<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:SS1poiyS2S_SStFZ\">+ (_: String, _: String) -&gt; String<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:s4SIMDPsSF6ScalarRpzrlE1poiyxx_xtFZ\">+ (_: Self, _: Self) -&gt; Self<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:s4SIMDPsSF6ScalarRpzrlE1poiyxAD_xtFZ\">+ (_: Self.Scalar, _: Self) -&gt; Self<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:s4SIMDPsSF6ScalarRpzrlE1poiyxx_ADtFZ\">+ (_: Self, _: Self.Scalar) -&gt; Self<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:Sf1poiyS2f_SftFZ\">+ (_: Float, _: Float) -&gt; Float<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:Sd1poiyS2d_SdtFZ\">+ (_: Double, _: Double) -&gt; Double<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:s7Float80V1poiyA2B_ABtFZ\">+ (_: Float80, _: Float80) -&gt; Float80<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V1poiyA2B_ABtFZ\">+ (_: UInt8, _: UInt8) -&gt; UInt8<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V1poiyA2B_ABtFZ\">+ (_: Int8, _: Int8) -&gt; Int8<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V1poiyA2B_ABtFZ\">+ (_: UInt16, _: UInt16) -&gt; UInt16<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V1poiyA2B_ABtFZ\">+ (_: Int16, _: Int16) -&gt; Int16<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V1poiyA2B_ABtFZ\">+ (_: UInt32, _: UInt32) -&gt; UInt32<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V1poiyA2B_ABtFZ\">+ (_: Int32, _: Int32) -&gt; Int32<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V1poiyA2B_ABtFZ\">+ (_: UInt64, _: UInt64) -&gt; UInt64<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V1poiyA2B_ABtFZ\">+ (_: Int64, _: Int64) -&gt; Int64<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:Su1poiyS2u_SutFZ\">+ (_: UInt, _: UInt) -&gt; UInt<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:Si1poiyS2i_SitFZ\">+ (_: Int, _: Int) -&gt; Int<\/RelatedName>"
            }
          ],
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let lhs: <Type usr=\"s:14SpmSwiftModule1TV\">T<\/Type><\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "let lhs: T",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "lhs"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": T"
                }
              ],
              "key.column" : 8,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:14SpmSwiftModule1TV\">T<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>",
              "key.kind" : "source.lang.swift.decl.var.parameter",
              "key.length" : 3,
              "key.line" : 116,
              "key.name" : "lhs",
              "key.offset" : 2342,
              "key.parent_loc" : 2340,
              "key.parsed_declaration" : "func +(lhs",
              "key.parsed_scope.end" : 116,
              "key.parsed_scope.start" : 116,
              "key.typename" : "T",
              "key.typeusr" : "$s14SpmSwiftModule1TVD",
              "key.usr" : "s:14SpmSwiftModule1poiySSAA1TV_ADtF3lhsL_ADvp"
            }
          ],
          "key.typename" : "(T, T) -> String",
          "key.typeusr" : "$sySS14SpmSwiftModule1TV_ACtcD",
          "key.usr" : "s:14SpmSwiftModule1poiySSAA1TV_ADtF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public class ADerivedClass&lt;T, Q&gt; : <Type usr=\"s:14SpmSwiftModule10ABaseClassC\">ABaseClass<\/Type> where <Type usr=\"s:14SpmSwiftModule13ADerivedClassC1Qq_mfp\">Q<\/Type> : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.length" : 6,
              "key.offset" : 2398
            }
          ],
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "A derived class"
            },
            "key.bb.doc_source" : "docComment"
          },
          "key.bb.inherited_types" : [
            {
              "key.bb.type_name" : "ABaseClass"
            }
          ],
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "public class ADerivedClass<T, Q>: ABaseClass where Q: Sequence",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "class "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "ADerivedClass"
            }
          ],
          "key.bodylength" : 310,
          "key.bodyoffset" : 2454,
          "key.column" : 14,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.column" : 14,
          "key.doc.comment" : "A derived class",
          "key.doc.declaration" : "public class ADerivedClass<T, Q> : ABaseClass where Q : Sequence",
          "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.doc.full_as_xml" : "<Class file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"121\" column=\"14\"><Name>ADerivedClass<\/Name><USR>s:14SpmSwiftModule13ADerivedClassC<\/USR><Declaration>public class ADerivedClass&lt;T, Q&gt; : ABaseClass where Q : Sequence<\/Declaration><CommentParts><Abstract><Para>A derived class<\/Para><\/Abstract><\/CommentParts><\/Class>",
          "key.doc.line" : 121,
          "key.doc.name" : "ADerivedClass",
          "key.doc.type" : "Class",
          "key.doclength" : 20,
          "key.docoffset" : 2378,
          "key.elements" : [
            {
              "key.kind" : "source.lang.swift.structure.elem.typeref",
              "key.length" : 10,
              "key.offset" : 2442
            }
          ],
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>ADerivedClass<\/decl.name>&lt;<decl.generic_type_param usr=\"s:14SpmSwiftModule13ADerivedClassC1Txmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:14SpmSwiftModule13ADerivedClassC1Qq_mfp\"><decl.generic_type_param.name>Q<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.class usr=\"s:14SpmSwiftModule10ABaseClassC\">ABaseClass<\/ref.class> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:14SpmSwiftModule13ADerivedClassC1Qq_mfp\">Q<\/ref.generic_type_param> : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
          "key.inheritedtypes" : [
            {
              "key.name" : "ABaseClass"
            }
          ],
          "key.kind" : "source.lang.swift.decl.class",
          "key.length" : 360,
          "key.line" : 121,
          "key.name" : "ADerivedClass",
          "key.namelength" : 13,
          "key.nameoffset" : 2411,
          "key.offset" : 2405,
          "key.parsed_declaration" : "public class ADerivedClass<T, Q: Sequence>: ABaseClass",
          "key.parsed_scope.end" : 135,
          "key.parsed_scope.start" : 121,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>T<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "T",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "T"
                }
              ],
              "key.column" : 28,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
              "key.kind" : "source.lang.swift.decl.generic_type_param",
              "key.length" : 1,
              "key.line" : 121,
              "key.name" : "T",
              "key.namelength" : 1,
              "key.nameoffset" : 2425,
              "key.offset" : 2425,
              "key.parsed_declaration" : "public class ADerivedClass<T",
              "key.parsed_scope.end" : 121,
              "key.parsed_scope.start" : 121,
              "key.typename" : "T.Type",
              "key.typeusr" : "$sxmD",
              "key.usr" : "s:14SpmSwiftModule13ADerivedClassC1Txmfp"
            },
            {
              "key.annotated_decl" : "<Declaration>Q : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
              "key.bb.inherited_types" : [
                {
                  "key.bb.type_name" : "Sequence"
                }
              ],
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "Q : Sequence",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "Q"
                }
              ],
              "key.column" : 31,
              "key.decl_lang" : "source.lang.swift",
              "key.elements" : [
                {
                  "key.kind" : "source.lang.swift.structure.elem.typeref",
                  "key.length" : 8,
                  "key.offset" : 2431
                }
              ],
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>Q<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
              "key.inheritedtypes" : [
                {
                  "key.name" : "Sequence"
                }
              ],
              "key.kind" : "source.lang.swift.decl.generic_type_param",
              "key.length" : 11,
              "key.line" : 121,
              "key.name" : "Q",
              "key.namelength" : 1,
              "key.nameoffset" : 2428,
              "key.offset" : 2428,
              "key.parsed_declaration" : "public class ADerivedClass<T, Q: Sequence",
              "key.parsed_scope.end" : 121,
              "key.parsed_scope.start" : 121,
              "key.typename" : "Q.Type",
              "key.typeusr" : "$sq_mD",
              "key.usr" : "s:14SpmSwiftModule13ADerivedClassC1Qq_mfp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>var t: <Type usr=\"s:14SpmSwiftModule13ADerivedClassC1Qq_mfp\">Q<\/Type>?<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "var t: Q?",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "var "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "t"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": Q?"
                }
              ],
              "key.column" : 7,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>t<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:14SpmSwiftModule13ADerivedClassC1Qq_mfp\">Q<\/ref.generic_type_param>?<\/decl.var.type><\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 15,
              "key.line" : 122,
              "key.name" : "t",
              "key.namelength" : 1,
              "key.nameoffset" : 2461,
              "key.offset" : 2457,
              "key.parsed_declaration" : "var t: Q? = nil",
              "key.parsed_scope.end" : 122,
              "key.parsed_scope.start" : 122,
              "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
              "key.typename" : "Q?",
              "key.typeusr" : "$sq_SgD",
              "key.usr" : "s:14SpmSwiftModule13ADerivedClassC1tq_Sgvp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public override func method(param: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.override",
                  "key.length" : 8,
                  "key.offset" : 2519
                },
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.length" : 6,
                  "key.offset" : 2512
                }
              ],
              "key.bb.documentation" : {
                "key.bb.abstract" : {
                  "en" : "See `ABaseClass.method(...)`."
                },
                "key.bb.doc_source" : "docComment"
              },
              "key.bb.is_override" : true,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "public override func method(param: Int) -> String",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "method"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "("
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "param"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": Int) -> String"
                }
              ],
              "key.bodylength" : 17,
              "key.bodyoffset" : 2563,
              "key.column" : 24,
              "key.decl_lang" : "source.lang.swift",
              "key.doc.column" : 24,
              "key.doc.comment" : "See `ABaseClass.method(...)`.",
              "key.doc.declaration" : "public override func method(param: Int) -> String",
              "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.doc.full_as_xml" : "<Function file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"125\" column=\"24\"><Name>method(param:)<\/Name><USR>s:14SpmSwiftModule13ADerivedClassC6method5paramSSSi_tF<\/USR><Declaration>public override func method(param: Int) -&gt; String<\/Declaration><CommentParts><Abstract><Para>See <codeVoice>ABaseClass.method(...)<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
              "key.doc.line" : 125,
              "key.doc.name" : "method(param:)",
              "key.doc.type" : "Function",
              "key.doclength" : 34,
              "key.docoffset" : 2476,
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>override<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>method<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>param<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 53,
              "key.line" : 125,
              "key.name" : "method(param:)",
              "key.namelength" : 18,
              "key.nameoffset" : 2533,
              "key.offset" : 2528,
              "key.overrides" : [
                {
                  "key.usr" : "s:14SpmSwiftModule10ABaseClassC6method5paramSSSi_tF"
                }
              ],
              "key.parsed_declaration" : "public override func method(param: Int) -> String",
              "key.parsed_scope.end" : 127,
              "key.parsed_scope.start" : 125,
              "key.typename" : "<T, Q where Q : Sequence> (ADerivedClass<T, Q>) -> (Int) -> String",
              "key.typeusr" : "$s5paramSSSi_tcD",
              "key.usr" : "s:14SpmSwiftModule13ADerivedClassC6method5paramSSSi_tF"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public func generic(param: <Type usr=\"s:14SpmSwiftModule13ADerivedClassC1Txmfp\">T<\/Type>) where <Type usr=\"s:14SpmSwiftModule13ADerivedClassC1Txmfp\">T<\/Type> : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.length" : 6,
                  "key.offset" : 2585
                }
              ],
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "public func generic(param: T) where T: Equatable",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "generic"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "("
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "param"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": T)"
                }
              ],
              "key.bodylength" : 0,
              "key.bodyoffset" : 2635,
              "key.column" : 15,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>generic<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>param<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:14SpmSwiftModule13ADerivedClassC1Txmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:14SpmSwiftModule13ADerivedClassC1Txmfp\">T<\/ref.generic_type_param> : <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 44,
              "key.line" : 129,
              "key.name" : "generic(param:)",
              "key.namelength" : 17,
              "key.nameoffset" : 2597,
              "key.offset" : 2592,
              "key.parsed_declaration" : "public func generic(param: T) where T: Equatable",
              "key.parsed_scope.end" : 129,
              "key.parsed_scope.start" : 129,
              "key.typename" : "<T, Q where T : Equatable, Q : Sequence> (ADerivedClass<T, Q>) -> (T) -> ()",
              "key.typeusr" : "$s5paramyx_tcSQRzrluD",
              "key.usr" : "s:14SpmSwiftModule13ADerivedClassC7generic5paramyx_tSQRzrlF"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public func generic2&lt;R&gt;(param: <Type usr=\"s:14SpmSwiftModule13ADerivedClassC1Txmfp\">T<\/Type>, my param2: <Type usr=\"s:14SpmSwiftModule13ADerivedClassC8generic25param2myxx_qd__tSTRd__AA13FirstProtocol7ElementRpd__lF1RL_qd__mfp\">R<\/Type>) -&gt; <Type usr=\"s:14SpmSwiftModule13ADerivedClassC1Txmfp\">T<\/Type> where <Type usr=\"s:14SpmSwiftModule13ADerivedClassC8generic25param2myxx_qd__tSTRd__AA13FirstProtocol7ElementRpd__lF1RL_qd__mfp\">R<\/Type> : <Type usr=\"s:ST\">Sequence<\/Type>, <Type usr=\"s:14SpmSwiftModule13ADerivedClassC8generic25param2myxx_qd__tSTRd__AA13FirstProtocol7ElementRpd__lF1RL_qd__mfp\">R<\/Type>.<Type usr=\"s:ST7ElementQa\">Element<\/Type> : <Type usr=\"s:14SpmSwiftModule13FirstProtocolP\">FirstProtocol<\/Type><\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.length" : 6,
                  "key.offset" : 2640
                }
              ],
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "public func generic2<R>(param: T, my param2: R) -> T\nwhere R: Sequence, R.Element: FirstProtocol",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "func "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "generic2"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "<R>("
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "param"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": T, "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "my"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": R) -> T"
                }
              ],
              "key.bodylength" : 20,
              "key.bodyoffset" : 2742,
              "key.column" : 15,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>generic2<\/decl.name>&lt;<decl.generic_type_param usr=\"s:14SpmSwiftModule13ADerivedClassC8generic25param2myxx_qd__tSTRd__AA13FirstProtocol7ElementRpd__lF1RL_qd__mfp\"><decl.generic_type_param.name>R<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>param<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:14SpmSwiftModule13ADerivedClassC1Txmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>my<\/decl.var.parameter.argument_label> <decl.var.parameter.name>param2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:14SpmSwiftModule13ADerivedClassC8generic25param2myxx_qd__tSTRd__AA13FirstProtocol7ElementRpd__lF1RL_qd__mfp\">R<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:14SpmSwiftModule13ADerivedClassC1Txmfp\">T<\/ref.generic_type_param><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:14SpmSwiftModule13ADerivedClassC8generic25param2myxx_qd__tSTRd__AA13FirstProtocol7ElementRpd__lF1RL_qd__mfp\">R<\/ref.generic_type_param> : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:14SpmSwiftModule13ADerivedClassC8generic25param2myxx_qd__tSTRd__AA13FirstProtocol7ElementRpd__lF1RL_qd__mfp\">R<\/ref.generic_type_param>.<ref.associatedtype usr=\"s:ST7ElementQa\">Element<\/ref.associatedtype> : <ref.protocol usr=\"s:14SpmSwiftModule13FirstProtocolP\">FirstProtocol<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 116,
              "key.line" : 131,
              "key.name" : "generic2(param:my:)",
              "key.namelength" : 35,
              "key.nameoffset" : 2652,
              "key.offset" : 2647,
              "key.parsed_declaration" : "public func generic2<R>(param: T, my param2: R) -> T\n  where R: Sequence, R.Element: FirstProtocol",
              "key.parsed_scope.end" : 134,
              "key.parsed_scope.start" : 131,
              "key.substructure" : [
                {
                  "key.annotated_decl" : "<Declaration>R<\/Declaration>",
                  "key.bb.is_override" : false,
                  "key.bb.is_spi" : false,
                  "key.bb.swift_declaration" : "R",
                  "key.bb.swift_deprecated_everywhere" : false,
                  "key.bb.swift_name_pieces" : [
                    {
                      "key.bb.name_piece_is_name" : true,
                      "key.bb.name_piece_text" : "R"
                    }
                  ],
                  "key.column" : 24,
                  "key.decl_lang" : "source.lang.swift",
                  "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
                  "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>R<\/decl.generic_type_param.name><\/decl.generic_type_param>",
                  "key.kind" : "source.lang.swift.decl.generic_type_param",
                  "key.length" : 1,
                  "key.line" : 131,
                  "key.name" : "R",
                  "key.namelength" : 1,
                  "key.nameoffset" : 2661,
                  "key.offset" : 2661,
                  "key.parsed_declaration" : "public func generic2<R",
                  "key.parsed_scope.end" : 131,
                  "key.parsed_scope.start" : 131,
                  "key.typename" : "R.Type",
                  "key.typeusr" : "$sqd__mD",
                  "key.usr" : "s:14SpmSwiftModule13ADerivedClassC8generic25param2myxx_qd__tSTRd__AA13FirstProtocol7ElementRpd__lF1RL_qd__mfp"
                }
              ],
              "key.typename" : "<T, Q, R where Q : Sequence, R : Sequence, R.Element : FirstProtocol> (ADerivedClass<T, Q>) -> (T, R) -> T",
              "key.typeusr" : "$s5param2myxx_qd__tcSTRd__14SpmSwiftModule13FirstProtocol7ElementRpd__luD",
              "key.usr" : "s:14SpmSwiftModule13ADerivedClassC8generic25param2myxx_qd__tSTRd__AA13FirstProtocol7ElementRpd__lF"
            }
          ],
          "key.typename" : "ADerivedClass<T, Q>.Type",
          "key.typeusr" : "$s14SpmSwiftModule13ADerivedClassCyxq_GmD",
          "key.usr" : "s:14SpmSwiftModule13ADerivedClassC"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@propertyWrapper struct Nop<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.propertyWrapper",
              "key.length" : 16,
              "key.offset" : 2767
            }
          ],
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "@propertyWrapper\nstruct Nop",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "struct "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "Nop"
            }
          ],
          "key.bodylength" : 111,
          "key.bodyoffset" : 2796,
          "key.column" : 8,
          "key.decl_lang" : "source.lang.swift",
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@propertyWrapper<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Nop<\/decl.name><\/decl.struct>",
          "key.kind" : "source.lang.swift.decl.struct",
          "key.length" : 124,
          "key.line" : 138,
          "key.name" : "Nop",
          "key.namelength" : 3,
          "key.nameoffset" : 2791,
          "key.offset" : 2784,
          "key.parsed_declaration" : "struct Nop",
          "key.parsed_scope.end" : 144,
          "key.parsed_scope.start" : 138,
          "key.substructure" : [
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>var wrappedValue: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "var wrappedValue: String",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "var "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "wrappedValue"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": String"
                }
              ],
              "key.column" : 9,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>wrappedValue<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 24,
              "key.line" : 139,
              "key.name" : "wrappedValue",
              "key.namelength" : 12,
              "key.nameoffset" : 2805,
              "key.offset" : 2801,
              "key.parsed_declaration" : "var wrappedValue: String",
              "key.parsed_scope.end" : 139,
              "key.parsed_scope.start" : 139,
              "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
              "key.typename" : "String",
              "key.typeusr" : "$sSSD",
              "key.usr" : "s:14SpmSwiftModule3NopV12wrappedValueSSvp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>init(wrappedValue: <Type usr=\"s:SS\">String<\/Type>)<\/Declaration>",
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "init(wrappedValue: String)",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "init"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "("
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "wrappedValue"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": String)"
                }
              ],
              "key.bodylength" : 46,
              "key.bodyoffset" : 2859,
              "key.column" : 5,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>wrappedValue<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 75,
              "key.line" : 141,
              "key.name" : "init(wrappedValue:)",
              "key.namelength" : 26,
              "key.nameoffset" : 2831,
              "key.offset" : 2831,
              "key.parsed_declaration" : "init(wrappedValue: String)",
              "key.parsed_scope.end" : 143,
              "key.parsed_scope.start" : 141,
              "key.typename" : "(Nop.Type) -> (String) -> Nop",
              "key.typeusr" : "$s12wrappedValue14SpmSwiftModule3NopVSS_tcD",
              "key.usr" : "s:14SpmSwiftModule3NopV12wrappedValueACSS_tcfc"
            }
          ],
          "key.typename" : "Nop.Type",
          "key.typeusr" : "$s14SpmSwiftModule3NopVmD",
          "key.usr" : "s:14SpmSwiftModule3NopV"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>struct PropertyWrapperClient<\/Declaration>",
          "key.bb.documentation" : {
            "key.bb.abstract" : {
              "en" : "See `@Nop`."
            },
            "key.bb.doc_source" : "docComment"
          },
          "key.bb.is_override" : false,
          "key.bb.is_spi" : false,
          "key.bb.swift_declaration" : "struct PropertyWrapperClient",
          "key.bb.swift_deprecated_everywhere" : false,
          "key.bb.swift_name_pieces" : [
            {
              "key.bb.name_piece_is_name" : false,
              "key.bb.name_piece_text" : "struct "
            },
            {
              "key.bb.name_piece_is_name" : true,
              "key.bb.name_piece_text" : "PropertyWrapperClient"
            }
          ],
          "key.bodylength" : 28,
          "key.bodyoffset" : 2956,
          "key.column" : 8,
          "key.decl_lang" : "source.lang.swift",
          "key.doc.column" : 8,
          "key.doc.comment" : "See `@Nop`.",
          "key.doc.declaration" : "struct PropertyWrapperClient",
          "key.doc.file" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.doc.full_as_xml" : "<Class file=\"\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift\" line=\"147\" column=\"8\"><Name>PropertyWrapperClient<\/Name><USR>s:14SpmSwiftModule21PropertyWrapperClientV<\/USR><Declaration>struct PropertyWrapperClient<\/Declaration><CommentParts><Abstract><Para>See <codeVoice>@Nop<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Class>",
          "key.doc.line" : 147,
          "key.doc.name" : "PropertyWrapperClient",
          "key.doc.type" : "Class",
          "key.doclength" : 16,
          "key.docoffset" : 2910,
          "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
          "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>PropertyWrapperClient<\/decl.name><\/decl.struct>",
          "key.kind" : "source.lang.swift.decl.struct",
          "key.length" : 59,
          "key.line" : 147,
          "key.name" : "PropertyWrapperClient",
          "key.namelength" : 21,
          "key.nameoffset" : 2933,
          "key.offset" : 2926,
          "key.parsed_declaration" : "struct PropertyWrapperClient",
          "key.parsed_scope.end" : 150,
          "key.parsed_scope.start" : 147,
          "key.substructure" : [
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>@<Type usr=\"s:14SpmSwiftModule3NopV\">Nop<\/Type> var v: <Type usr=\"s:SS\">String<\/Type> { get set }<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute._custom",
                  "key.length" : 4,
                  "key.offset" : 2961
                }
              ],
              "key.bb.is_override" : false,
              "key.bb.is_spi" : false,
              "key.bb.swift_declaration" : "@Nop\nvar v: String { get set }",
              "key.bb.swift_deprecated_everywhere" : false,
              "key.bb.swift_name_pieces" : [
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : "var "
                },
                {
                  "key.bb.name_piece_is_name" : true,
                  "key.bb.name_piece_text" : "v"
                },
                {
                  "key.bb.name_piece_is_name" : false,
                  "key.bb.name_piece_text" : ": String"
                }
              ],
              "key.column" : 9,
              "key.decl_lang" : "source.lang.swift",
              "key.filepath" : "\/Users\/johnf\/project\/J2\/Tests\/BebopTests\/Fixtures\/SpmSwiftPackage\/Sources\/SpmSwiftModule\/SpmSwiftModule.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@<ref.struct usr=\"s:14SpmSwiftModule3NopV\">Nop<\/ref.struct><\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>v<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 13,
              "key.line" : 149,
              "key.name" : "v",
              "key.namelength" : 1,
              "key.nameoffset" : 2974,
              "key.offset" : 2970,
              "key.parsed_declaration" : "var v: String",
              "key.parsed_scope.end" : 149,
              "key.parsed_scope.start" : 149,
              "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
              "key.typename" : "String",
              "key.typeusr" : "$sSSD",
              "key.usr" : "s:14SpmSwiftModule21PropertyWrapperClientV1vSSvp"
            }
          ],
          "key.typename" : "PropertyWrapperClient.Type",
          "key.typeusr" : "$s14SpmSwiftModule21PropertyWrapperClientVmD",
          "key.usr" : "s:14SpmSwiftModule21PropertyWrapperClientV"
        }
      ]
    }
  }
]
